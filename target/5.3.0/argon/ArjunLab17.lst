
/Users/student/Desktop/IoT/ArjunLab17/target/5.3.0/argon/ArjunLab17.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002610  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b662c  000b662c  0000662c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .data         000000fc  2003e578  000b6650  0000e578  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000017c  2003e674  2003e674  0001e674  2**2
                  ALLOC
  6 .backup       00000004  2003f400  000b674c  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_product 00000006  000b6750  000b6750  00016750  2**0
                  ALLOC
  8 .module_info_suffix 00000024  000b6756  000b6756  00016756  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .module_info_crc 00000004  000b677a  000b677a  0001677a  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .debug_info   000ffd96  00000000  00000000  0001677e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00010067  00000000  00000000  00116514  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    000390b5  00000000  00000000  0012657b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000029c8  00000000  00000000  0015f630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 0000a380  00000000  00000000  00161ff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00033ad6  00000000  00000000  0016c378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000376a9  00000000  00000000  0019fe4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00138564  00000000  00000000  001d74f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00007858  00000000  00000000  0030fa5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <strcmp>:
   b401c:	f810 2b01 	ldrb.w	r2, [r0], #1
   b4020:	f811 3b01 	ldrb.w	r3, [r1], #1
   b4024:	2a01      	cmp	r2, #1
   b4026:	bf28      	it	cs
   b4028:	429a      	cmpcs	r2, r3
   b402a:	d0f7      	beq.n	b401c <strcmp>
   b402c:	1ad0      	subs	r0, r2, r3
   b402e:	4770      	bx	lr

000b4030 <strlen>:
   b4030:	4603      	mov	r3, r0
   b4032:	f813 2b01 	ldrb.w	r2, [r3], #1
   b4036:	2a00      	cmp	r2, #0
   b4038:	d1fb      	bne.n	b4032 <strlen+0x2>
   b403a:	1a18      	subs	r0, r3, r0
   b403c:	3801      	subs	r0, #1
   b403e:	4770      	bx	lr

000b4040 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4040:	4809      	ldr	r0, [pc, #36]	; (b4068 <module_user_pre_init+0x28>)
   b4042:	490a      	ldr	r1, [pc, #40]	; (b406c <module_user_pre_init+0x2c>)
   b4044:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4046:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4048:	d005      	beq.n	b4056 <module_user_pre_init+0x16>
   b404a:	4a09      	ldr	r2, [pc, #36]	; (b4070 <module_user_pre_init+0x30>)
   b404c:	4282      	cmp	r2, r0
   b404e:	d002      	beq.n	b4056 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4050:	1a12      	subs	r2, r2, r0
   b4052:	f002 f845 	bl	b60e0 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4056:	4807      	ldr	r0, [pc, #28]	; (b4074 <module_user_pre_init+0x34>)
   b4058:	4a07      	ldr	r2, [pc, #28]	; (b4078 <module_user_pre_init+0x38>)
   b405a:	2100      	movs	r1, #0
   b405c:	1a12      	subs	r2, r2, r0
   b405e:	f002 f84d 	bl	b60fc <memset>
    return &link_global_data_start;
}
   b4062:	4801      	ldr	r0, [pc, #4]	; (b4068 <module_user_pre_init+0x28>)
   b4064:	bd08      	pop	{r3, pc}
   b4066:	bf00      	nop
   b4068:	2003e578 	.word	0x2003e578
   b406c:	000b6650 	.word	0x000b6650
   b4070:	2003e674 	.word	0x2003e674
   b4074:	2003e674 	.word	0x2003e674
   b4078:	2003e7f0 	.word	0x2003e7f0

000b407c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b407c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b407e:	4e07      	ldr	r6, [pc, #28]	; (b409c <module_user_init+0x20>)
   b4080:	4c07      	ldr	r4, [pc, #28]	; (b40a0 <module_user_init+0x24>)
    module_user_init_hook();
   b4082:	f001 fea1 	bl	b5dc8 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4086:	1ba4      	subs	r4, r4, r6
   b4088:	08a4      	lsrs	r4, r4, #2
   b408a:	2500      	movs	r5, #0
   b408c:	42ac      	cmp	r4, r5
   b408e:	d100      	bne.n	b4092 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4090:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4092:	f856 3b04 	ldr.w	r3, [r6], #4
   b4096:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4098:	3501      	adds	r5, #1
   b409a:	e7f7      	b.n	b408c <module_user_init+0x10>
   b409c:	000b6608 	.word	0x000b6608
   b40a0:	000b662c 	.word	0x000b662c

000b40a4 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b40a4:	f000 b870 	b.w	b4188 <setup>

000b40a8 <module_user_loop>:
}

void module_user_loop() {
   b40a8:	b508      	push	{r3, lr}
    loop();
   b40aa:	f000 f875 	bl	b4198 <loop>
    _post_loop();
}
   b40ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b40b2:	f001 be41 	b.w	b5d38 <_post_loop>

000b40b6 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b40b6:	f000 becf 	b.w	b4e58 <malloc>

000b40ba <_Znaj>:
   b40ba:	f000 becd 	b.w	b4e58 <malloc>

000b40be <_ZdaPv>:
   b40be:	f000 bed3 	b.w	b4e68 <free>

000b40c2 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b40c2:	f000 bed1 	b.w	b4e68 <free>

000b40c6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40c6:	7800      	ldrb	r0, [r0, #0]
   b40c8:	fab0 f080 	clz	r0, r0
   b40cc:	0940      	lsrs	r0, r0, #5
   b40ce:	4770      	bx	lr

000b40d0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40d0:	2301      	movs	r3, #1
   b40d2:	7003      	strb	r3, [r0, #0]
   b40d4:	4770      	bx	lr
	...

000b40d8 <_Z8callbackPcPhj>:
  }
  delay(fsm[cState].wait);
  cState = fsm[cState].nextState[directionFlow];
}
void callback(char *topic, byte *payload, unsigned int length)
{
   b40d8:	b5b0      	push	{r4, r5, r7, lr}
  char p[length + 1];
   b40da:	f102 0308 	add.w	r3, r2, #8
{
   b40de:	b084      	sub	sp, #16
  char p[length + 1];
   b40e0:	f023 0307 	bic.w	r3, r3, #7
{
   b40e4:	af00      	add	r7, sp, #0
  char p[length + 1];
   b40e6:	ebad 0d03 	sub.w	sp, sp, r3
{
   b40ea:	4614      	mov	r4, r2
  memcpy(p, payload, length);
   b40ec:	4668      	mov	r0, sp
   b40ee:	f001 fff7 	bl	b60e0 <memcpy>
  p[length] = NULL;
   b40f2:	2300      	movs	r3, #0
  if (String(p).equals("true"))
   b40f4:	4669      	mov	r1, sp
   b40f6:	4638      	mov	r0, r7
  p[length] = NULL;
   b40f8:	f80d 3004 	strb.w	r3, [sp, r4]
  if (String(p).equals("true"))
   b40fc:	f001 f909 	bl	b5312 <_ZN6StringC1EPK19__FlashStringHelper>
   b4100:	4918      	ldr	r1, [pc, #96]	; (b4164 <_Z8callbackPcPhj+0x8c>)
   b4102:	4638      	mov	r0, r7
   b4104:	f001 f97b 	bl	b53fe <_ZNK6String6equalsEPKc>
   b4108:	4604      	mov	r4, r0
   b410a:	4638      	mov	r0, r7
   b410c:	f001 f8b6 	bl	b527c <_ZN6StringD1Ev>
   b4110:	b17c      	cbz	r4, b4132 <_Z8callbackPcPhj+0x5a>
  {
    directionFlow = true;
   b4112:	4b15      	ldr	r3, [pc, #84]	; (b4168 <_Z8callbackPcPhj+0x90>)
    client.publish("FSM/CoolTopic1", "EastWait");
   b4114:	4915      	ldr	r1, [pc, #84]	; (b416c <_Z8callbackPcPhj+0x94>)
   b4116:	4816      	ldr	r0, [pc, #88]	; (b4170 <_Z8callbackPcPhj+0x98>)
    directionFlow = true;
   b4118:	2201      	movs	r2, #1
   b411a:	701a      	strb	r2, [r3, #0]
    client.publish("FSM/CoolTopic1", "EastWait");
   b411c:	4a15      	ldr	r2, [pc, #84]	; (b4174 <_Z8callbackPcPhj+0x9c>)
   b411e:	f000 fb58 	bl	b47d2 <_ZN4MQTT7publishEPKcS1_>
    client.publish("FSM/LED1", "true");
   b4122:	4a10      	ldr	r2, [pc, #64]	; (b4164 <_Z8callbackPcPhj+0x8c>)
  }
  else if (String(p).equals("false"))
  {
    directionFlow = false;
    client.publish("FSM/CoolTopic1", "NorthWait");
    client.publish("FSM/LED1", "false");
   b4124:	4914      	ldr	r1, [pc, #80]	; (b4178 <_Z8callbackPcPhj+0xa0>)
  }
  else
  {
    client.publish("FSM/CoolTopic1", "Other thing");
   b4126:	4812      	ldr	r0, [pc, #72]	; (b4170 <_Z8callbackPcPhj+0x98>)
   b4128:	f000 fb53 	bl	b47d2 <_ZN4MQTT7publishEPKcS1_>
  }
   b412c:	3710      	adds	r7, #16
   b412e:	46bd      	mov	sp, r7
   b4130:	bdb0      	pop	{r4, r5, r7, pc}
  else if (String(p).equals("false"))
   b4132:	4669      	mov	r1, sp
   b4134:	4638      	mov	r0, r7
   b4136:	f001 f8ec 	bl	b5312 <_ZN6StringC1EPK19__FlashStringHelper>
   b413a:	4910      	ldr	r1, [pc, #64]	; (b417c <_Z8callbackPcPhj+0xa4>)
   b413c:	4638      	mov	r0, r7
   b413e:	f001 f95e 	bl	b53fe <_ZNK6String6equalsEPKc>
   b4142:	4605      	mov	r5, r0
   b4144:	4638      	mov	r0, r7
   b4146:	f001 f899 	bl	b527c <_ZN6StringD1Ev>
   b414a:	b145      	cbz	r5, b415e <_Z8callbackPcPhj+0x86>
    directionFlow = false;
   b414c:	4b06      	ldr	r3, [pc, #24]	; (b4168 <_Z8callbackPcPhj+0x90>)
    client.publish("FSM/CoolTopic1", "NorthWait");
   b414e:	4a0c      	ldr	r2, [pc, #48]	; (b4180 <_Z8callbackPcPhj+0xa8>)
   b4150:	4906      	ldr	r1, [pc, #24]	; (b416c <_Z8callbackPcPhj+0x94>)
   b4152:	4807      	ldr	r0, [pc, #28]	; (b4170 <_Z8callbackPcPhj+0x98>)
    directionFlow = false;
   b4154:	701c      	strb	r4, [r3, #0]
    client.publish("FSM/CoolTopic1", "NorthWait");
   b4156:	f000 fb3c 	bl	b47d2 <_ZN4MQTT7publishEPKcS1_>
    client.publish("FSM/LED1", "false");
   b415a:	4a08      	ldr	r2, [pc, #32]	; (b417c <_Z8callbackPcPhj+0xa4>)
   b415c:	e7e2      	b.n	b4124 <_Z8callbackPcPhj+0x4c>
    client.publish("FSM/CoolTopic1", "Other thing");
   b415e:	4a09      	ldr	r2, [pc, #36]	; (b4184 <_Z8callbackPcPhj+0xac>)
   b4160:	4902      	ldr	r1, [pc, #8]	; (b416c <_Z8callbackPcPhj+0x94>)
   b4162:	e7e0      	b.n	b4126 <_Z8callbackPcPhj+0x4e>
   b4164:	000b6268 	.word	0x000b6268
   b4168:	2003e6d8 	.word	0x2003e6d8
   b416c:	000b6276 	.word	0x000b6276
   b4170:	2003e678 	.word	0x2003e678
   b4174:	000b626d 	.word	0x000b626d
   b4178:	000b6285 	.word	0x000b6285
   b417c:	000b628e 	.word	0x000b628e
   b4180:	000b6294 	.word	0x000b6294
   b4184:	000b629e 	.word	0x000b629e

000b4188 <setup>:
  client.subscribe("FSM/EpicTopic1");
   b4188:	4901      	ldr	r1, [pc, #4]	; (b4190 <setup+0x8>)
   b418a:	4802      	ldr	r0, [pc, #8]	; (b4194 <setup+0xc>)
   b418c:	f000 bcc5 	b.w	b4b1a <_ZN4MQTT9subscribeEPKc>
   b4190:	000b62aa 	.word	0x000b62aa
   b4194:	2003e678 	.word	0x2003e678

000b4198 <loop>:
{
   b4198:	b570      	push	{r4, r5, r6, lr}
  if (client.isConnected())
   b419a:	482e      	ldr	r0, [pc, #184]	; (b4254 <loop+0xbc>)
{
   b419c:	b090      	sub	sp, #64	; 0x40
  if (client.isConnected())
   b419e:	f000 f99d 	bl	b44dc <_ZN4MQTT11isConnectedEv>
   b41a2:	2800      	cmp	r0, #0
   b41a4:	d047      	beq.n	b4236 <loop+0x9e>
    client.loop();
   b41a6:	482b      	ldr	r0, [pc, #172]	; (b4254 <loop+0xbc>)
   b41a8:	f000 fb6f 	bl	b488a <_ZN4MQTT4loopEv>
    int sendOut = fsm[cState].out[i];
   b41ac:	4c2a      	ldr	r4, [pc, #168]	; (b4258 <loop+0xc0>)
   b41ae:	4d2b      	ldr	r5, [pc, #172]	; (b425c <loop+0xc4>)
{
   b41b0:	2600      	movs	r6, #0
    int sendOut = fsm[cState].out[i];
   b41b2:	682a      	ldr	r2, [r5, #0]
   b41b4:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
   b41b8:	1991      	adds	r1, r2, r6
    String trueFalse = String(sendOut);
   b41ba:	4668      	mov	r0, sp
   b41bc:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
   b41c0:	220a      	movs	r2, #10
    String numLed = String(i + 1);
   b41c2:	3601      	adds	r6, #1
    String trueFalse = String(sendOut);
   b41c4:	f001 f8e5 	bl	b5392 <_ZN6StringC1Eih>
    String numLed = String(i + 1);
   b41c8:	220a      	movs	r2, #10
   b41ca:	4631      	mov	r1, r6
   b41cc:	a804      	add	r0, sp, #16
   b41ce:	f001 f8e0 	bl	b5392 <_ZN6StringC1Eih>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   b41d2:	4923      	ldr	r1, [pc, #140]	; (b4260 <loop+0xc8>)
   b41d4:	a80c      	add	r0, sp, #48	; 0x30
   b41d6:	f001 f89c 	bl	b5312 <_ZN6StringC1EPK19__FlashStringHelper>
    String newTop = "FSM/LED" + numLed;
   b41da:	a904      	add	r1, sp, #16
   b41dc:	a80c      	add	r0, sp, #48	; 0x30
   b41de:	f001 f902 	bl	b53e6 <_ZplRK15StringSumHelperRK6String>
   b41e2:	4601      	mov	r1, r0
   b41e4:	a808      	add	r0, sp, #32
   b41e6:	f001 f8b7 	bl	b5358 <_ZN6StringC1ERKS_>
class StringSumHelper : public String
   b41ea:	a80c      	add	r0, sp, #48	; 0x30
   b41ec:	f001 f846 	bl	b527c <_ZN6StringD1Ev>
    client.publish(newTop, trueFalse);
   b41f0:	9a00      	ldr	r2, [sp, #0]
   b41f2:	9908      	ldr	r1, [sp, #32]
   b41f4:	4817      	ldr	r0, [pc, #92]	; (b4254 <loop+0xbc>)
   b41f6:	f000 faec 	bl	b47d2 <_ZN4MQTT7publishEPKcS1_>
    String newTop = "FSM/LED" + numLed;
   b41fa:	a808      	add	r0, sp, #32
   b41fc:	f001 f83e 	bl	b527c <_ZN6StringD1Ev>
    String numLed = String(i + 1);
   b4200:	a804      	add	r0, sp, #16
   b4202:	f001 f83b 	bl	b527c <_ZN6StringD1Ev>
    String trueFalse = String(sendOut);
   b4206:	4668      	mov	r0, sp
   b4208:	f001 f838 	bl	b527c <_ZN6StringD1Ev>
  for (int i = 0; i < 6; i++)
   b420c:	2e06      	cmp	r6, #6
   b420e:	d1d0      	bne.n	b41b2 <loop+0x1a>
  delay(fsm[cState].wait);
   b4210:	682b      	ldr	r3, [r5, #0]
   b4212:	2224      	movs	r2, #36	; 0x24
   b4214:	fb02 4303 	mla	r3, r2, r3, r4
   b4218:	6998      	ldr	r0, [r3, #24]
   b421a:	f000 fe4d 	bl	b4eb8 <delay>
  cState = fsm[cState].nextState[directionFlow];
   b421e:	4a11      	ldr	r2, [pc, #68]	; (b4264 <loop+0xcc>)
   b4220:	682b      	ldr	r3, [r5, #0]
   b4222:	7812      	ldrb	r2, [r2, #0]
   b4224:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   b4228:	4413      	add	r3, r2
   b422a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   b422e:	69db      	ldr	r3, [r3, #28]
   b4230:	602b      	str	r3, [r5, #0]
}
   b4232:	b010      	add	sp, #64	; 0x40
   b4234:	bd70      	pop	{r4, r5, r6, pc}
    inline static SleepResult sleep(const hal_pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count());
    }

    static String deviceID(void) {
        return spark_deviceID();
   b4236:	a80c      	add	r0, sp, #48	; 0x30
   b4238:	f000 fd9e 	bl	b4d78 <spark_deviceID>
    client.connect(System.deviceID());
   b423c:	990c      	ldr	r1, [sp, #48]	; 0x30
   b423e:	4805      	ldr	r0, [pc, #20]	; (b4254 <loop+0xbc>)
   b4240:	f000 fa3c 	bl	b46bc <_ZN4MQTT7connectEPKc>
   b4244:	a80c      	add	r0, sp, #48	; 0x30
   b4246:	f001 f819 	bl	b527c <_ZN6StringD1Ev>
    client.subscribe("FSM/EpicTopic1");
   b424a:	4907      	ldr	r1, [pc, #28]	; (b4268 <loop+0xd0>)
   b424c:	4801      	ldr	r0, [pc, #4]	; (b4254 <loop+0xbc>)
   b424e:	f000 fc64 	bl	b4b1a <_ZN4MQTT9subscribeEPKc>
   b4252:	e7ab      	b.n	b41ac <loop+0x14>
   b4254:	2003e678 	.word	0x2003e678
   b4258:	2003e578 	.word	0x2003e578
   b425c:	2003e674 	.word	0x2003e674
   b4260:	000b62b9 	.word	0x000b62b9
   b4264:	2003e6d8 	.word	0x2003e6d8
   b4268:	000b62aa 	.word	0x000b62aa

000b426c <_GLOBAL__sub_I_client>:
   b426c:	b513      	push	{r0, r1, r4, lr}
MQTT client("lab.theWCL.com", 1883, callback);
   b426e:	2400      	movs	r4, #0
   b4270:	4b07      	ldr	r3, [pc, #28]	; (b4290 <_GLOBAL__sub_I_client+0x24>)
   b4272:	4908      	ldr	r1, [pc, #32]	; (b4294 <_GLOBAL__sub_I_client+0x28>)
   b4274:	9400      	str	r4, [sp, #0]
   b4276:	f240 725b 	movw	r2, #1883	; 0x75b
   b427a:	4807      	ldr	r0, [pc, #28]	; (b4298 <_GLOBAL__sub_I_client+0x2c>)
   b427c:	f000 f852 	bl	b4324 <_ZN4MQTTC1EPKctPFvPcPhjEb>
SYSTEM_THREAD(ENABLED);
   b4280:	4621      	mov	r1, r4
   b4282:	2001      	movs	r0, #1
   b4284:	b002      	add	sp, #8
   b4286:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SYSTEM_THREAD(ENABLED);
   b428a:	f000 bd59 	b.w	b4d40 <system_thread_set_state>
   b428e:	bf00      	nop
   b4290:	000b40d9 	.word	0x000b40d9
   b4294:	000b62c1 	.word	0x000b62c1
   b4298:	2003e678 	.word	0x2003e678

000b429c <_ZN4MQTT11MutexLockerC1EPS_>:
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            this->mqtt = mqtt;
            if (mqtt->thread)
   b429c:	f891 305c 	ldrb.w	r3, [r1, #92]	; 0x5c
        MutexLocker(MQTT *mqtt) {
   b42a0:	b510      	push	{r4, lr}
   b42a2:	4604      	mov	r4, r0
            this->mqtt = mqtt;
   b42a4:	6001      	str	r1, [r0, #0]
            if (mqtt->thread)
   b42a6:	b113      	cbz	r3, b42ae <_ZN4MQTT11MutexLockerC1EPS_+0x12>
                os_mutex_lock(mqtt->mutex_lock);
   b42a8:	6d88      	ldr	r0, [r1, #88]	; 0x58
   b42aa:	f000 fc41 	bl	b4b30 <os_mutex_lock>
#endif
#endif
#endif
        }
   b42ae:	4620      	mov	r0, r4
   b42b0:	bd10      	pop	{r4, pc}

000b42b2 <_ZN4MQTT11MutexLockerD1Ev>:
        ~MutexLocker() {
   b42b2:	b510      	push	{r4, lr}
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            if (mqtt->thread)
   b42b4:	6803      	ldr	r3, [r0, #0]
   b42b6:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
        ~MutexLocker() {
   b42ba:	4604      	mov	r4, r0
            if (mqtt->thread)
   b42bc:	b112      	cbz	r2, b42c4 <_ZN4MQTT11MutexLockerD1Ev+0x12>
                os_mutex_unlock(mqtt->mutex_lock);
   b42be:	6d98      	ldr	r0, [r3, #88]	; 0x58
   b42c0:	f000 fc3e 	bl	b4b40 <os_mutex_unlock>
#endif
#endif
#endif
        }
   b42c4:	4620      	mov	r0, r4
   b42c6:	bd10      	pop	{r4, pc}

000b42c8 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb>:
    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(const char* domain, const uint8_t *ip, uint16_t port, int keepalive, int maxpacketsize, 
                    void (*callback)(char*,uint8_t*,unsigned int), bool thread) {
   b42c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b42ca:	461f      	mov	r7, r3
   b42cc:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   b42d0:	4604      	mov	r4, r0
   b42d2:	460d      	mov	r5, r1
   b42d4:	4616      	mov	r6, r2
    if (thread) {
   b42d6:	b12b      	cbz	r3, b42e4 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x1c>
        this->thread = true;
   b42d8:	2301      	movs	r3, #1
   b42da:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
        os_mutex_create(&mutex_lock);
   b42de:	3058      	adds	r0, #88	; 0x58
   b42e0:	f000 fc1e 	bl	b4b20 <os_mutex_create>
    }
    this->callback = callback;
   b42e4:	9b08      	ldr	r3, [sp, #32]
   b42e6:	6323      	str	r3, [r4, #48]	; 0x30
    this->qoscallback = NULL;
   b42e8:	2300      	movs	r3, #0
   b42ea:	6363      	str	r3, [r4, #52]	; 0x34
    if (ip != NULL)
   b42ec:	b106      	cbz	r6, b42f0 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x28>
        this->ip = ip;
   b42ee:	64a6      	str	r6, [r4, #72]	; 0x48
    if (domain != NULL)
   b42f0:	b125      	cbz	r5, b42fc <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x34>
        this->domain = domain;
   b42f2:	4629      	mov	r1, r5
   b42f4:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b42f8:	f001 f839 	bl	b536e <_ZN6StringaSEPKc>
    this->port = port;
    this->keepalive = keepalive;
   b42fc:	9b06      	ldr	r3, [sp, #24]
   b42fe:	6523      	str	r3, [r4, #80]	; 0x50

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   b4300:	9b07      	ldr	r3, [sp, #28]
    if (buffer != NULL)
   b4302:	69e0      	ldr	r0, [r4, #28]
    this->port = port;
   b4304:	f8a4 704c 	strh.w	r7, [r4, #76]	; 0x4c
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   b4308:	2bff      	cmp	r3, #255	; 0xff
   b430a:	bfb8      	it	lt
   b430c:	23ff      	movlt	r3, #255	; 0xff
   b430e:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    if (buffer != NULL)
   b4312:	b108      	cbz	r0, b4318 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x50>
      delete[] buffer;
   b4314:	f7ff fed3 	bl	b40be <_ZdaPv>
    buffer = new uint8_t[this->maxpacketsize];
   b4318:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
   b431c:	f7ff fecd 	bl	b40ba <_Znaj>
   b4320:	61e0      	str	r0, [r4, #28]
}
   b4322:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4324 <_ZN4MQTTC1EPKctPFvPcPhjEb>:
MQTT::MQTT(const char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int),
   b4324:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b4328:	4604      	mov	r4, r0
            bool thread) {
   b432a:	2500      	movs	r5, #0
MQTT::MQTT(const char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int),
   b432c:	4617      	mov	r7, r2
   b432e:	4698      	mov	r8, r3
   b4330:	460e      	mov	r6, r1
            bool thread) {
   b4332:	f001 fb65 	bl	b5a00 <_ZN9TCPClientC1Ev>
   b4336:	490d      	ldr	r1, [pc, #52]	; (b436c <_ZN4MQTTC1EPKctPFvPcPhjEb+0x48>)
   b4338:	61e5      	str	r5, [r4, #28]
   b433a:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b433e:	f000 ffe8 	bl	b5312 <_ZN6StringC1EPK19__FlashStringHelper>
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
   b4342:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
            bool thread) {
   b4346:	64a5      	str	r5, [r4, #72]	; 0x48
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
   b4348:	e9cd 8302 	strd	r8, r3, [sp, #8]
   b434c:	22ff      	movs	r2, #255	; 0xff
   b434e:	230f      	movs	r3, #15
   b4350:	e9cd 3200 	strd	r3, r2, [sp]
   b4354:	4620      	mov	r0, r4
            bool thread) {
   b4356:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
   b435a:	463b      	mov	r3, r7
   b435c:	462a      	mov	r2, r5
   b435e:	4631      	mov	r1, r6
   b4360:	f7ff ffb2 	bl	b42c8 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb>
}
   b4364:	4620      	mov	r0, r4
   b4366:	b004      	add	sp, #16
   b4368:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b436c:	000b628d 	.word	0x000b628d

000b4370 <_ZN4MQTT8readByteEv>:
        _client.stop();
    }
    return false;
}

uint8_t MQTT::readByte() {
   b4370:	b510      	push	{r4, lr}
   b4372:	4604      	mov	r4, r0
    while(!_client.available()) {}
   b4374:	4620      	mov	r0, r4
   b4376:	f001 fa9f 	bl	b58b8 <_ZN9TCPClient9availableEv>
   b437a:	2800      	cmp	r0, #0
   b437c:	d0fa      	beq.n	b4374 <_ZN4MQTT8readByteEv+0x4>
    return _client.read();
   b437e:	4620      	mov	r0, r4
   b4380:	f001 f884 	bl	b548c <_ZN9TCPClient4readEv>
}
   b4384:	b2c0      	uxtb	r0, r0
   b4386:	bd10      	pop	{r4, pc}

000b4388 <_ZN4MQTT10readPacketEPh>:

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
   b4388:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b438c:	4605      	mov	r5, r0
   b438e:	4688      	mov	r8, r1
    uint16_t len = 0;
    buffer[len++] = readByte();
   b4390:	f7ff ffee 	bl	b4370 <_ZN4MQTT8readByteEv>
   b4394:	69eb      	ldr	r3, [r5, #28]
   b4396:	7018      	strb	r0, [r3, #0]
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
   b4398:	69eb      	ldr	r3, [r5, #28]
   b439a:	f893 a000 	ldrb.w	sl, [r3]
    uint32_t multiplier = 1;
   b439e:	f04f 0901 	mov.w	r9, #1
   b43a2:	f00a 0af0 	and.w	sl, sl, #240	; 0xf0
    uint16_t length = 0;
   b43a6:	2700      	movs	r7, #0
    buffer[len++] = readByte();
   b43a8:	464c      	mov	r4, r9
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
   b43aa:	4628      	mov	r0, r5
   b43ac:	f7ff ffe0 	bl	b4370 <_ZN4MQTT8readByteEv>
        buffer[len++] = digit;
   b43b0:	4626      	mov	r6, r4
   b43b2:	69eb      	ldr	r3, [r5, #28]
   b43b4:	5598      	strb	r0, [r3, r6]
        length += (digit & 127) * multiplier;
   b43b6:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   b43ba:	fb13 f309 	smulbb	r3, r3, r9
   b43be:	441f      	add	r7, r3
        buffer[len++] = digit;
   b43c0:	3401      	adds	r4, #1
        multiplier *= 128;
    } while ((digit & 128) != 0);
   b43c2:	0603      	lsls	r3, r0, #24
        buffer[len++] = digit;
   b43c4:	b2a4      	uxth	r4, r4
        length += (digit & 127) * multiplier;
   b43c6:	b2bf      	uxth	r7, r7
        multiplier *= 128;
   b43c8:	ea4f 19c9 	mov.w	r9, r9, lsl #7
    } while ((digit & 128) != 0);
   b43cc:	d4ed      	bmi.n	b43aa <_ZN4MQTT10readPacketEPh+0x22>
    *lengthLength = len-1;
   b43ce:	1e63      	subs	r3, r4, #1

    if (isPublish) {
   b43d0:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
    *lengthLength = len-1;
   b43d4:	f888 3000 	strb.w	r3, [r8]
    if (isPublish) {
   b43d8:	d11e      	bne.n	b4418 <_ZN4MQTT10readPacketEPh+0x90>
        // Read in topic length to calculate bytes to skip over for Stream writing
        buffer[len++] = readByte();
   b43da:	4628      	mov	r0, r5
   b43dc:	f7ff ffc8 	bl	b4370 <_ZN4MQTT8readByteEv>
   b43e0:	69eb      	ldr	r3, [r5, #28]
   b43e2:	5518      	strb	r0, [r3, r4]
        buffer[len++] = readByte();
   b43e4:	4628      	mov	r0, r5
   b43e6:	f7ff ffc3 	bl	b4370 <_ZN4MQTT8readByteEv>
   b43ea:	1cf4      	adds	r4, r6, #3
        buffer[len++] = readByte();
   b43ec:	3602      	adds	r6, #2
        buffer[len++] = readByte();
   b43ee:	b2b6      	uxth	r6, r6
   b43f0:	69eb      	ldr	r3, [r5, #28]
   b43f2:	b2a4      	uxth	r4, r4
   b43f4:	5598      	strb	r0, [r3, r6]
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
        start = 2;
   b43f6:	2602      	movs	r6, #2
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
   b43f8:	b2b6      	uxth	r6, r6
   b43fa:	42be      	cmp	r6, r7
   b43fc:	d20e      	bcs.n	b441c <_ZN4MQTT10readPacketEPh+0x94>
        digit = readByte();
   b43fe:	4628      	mov	r0, r5
   b4400:	f7ff ffb6 	bl	b4370 <_ZN4MQTT8readByteEv>
        if (len < this->maxpacketsize) {
   b4404:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
   b4408:	42a3      	cmp	r3, r4
            buffer[len] = digit;
   b440a:	bf84      	itt	hi
   b440c:	69eb      	ldrhi	r3, [r5, #28]
   b440e:	5518      	strbhi	r0, [r3, r4]
        }
        len++;
   b4410:	3401      	adds	r4, #1
   b4412:	b2a4      	uxth	r4, r4
    for (uint16_t i = start;i<length;i++) {
   b4414:	3601      	adds	r6, #1
   b4416:	e7ef      	b.n	b43f8 <_ZN4MQTT10readPacketEPh+0x70>
    uint8_t start = 0;
   b4418:	2600      	movs	r6, #0
   b441a:	e7ed      	b.n	b43f8 <_ZN4MQTT10readPacketEPh+0x70>
    }

    if (len > this->maxpacketsize) {
   b441c:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
        len = 0; // This will cause the packet to be ignored.
    }

    return len;
}
   b4420:	42a3      	cmp	r3, r4
   b4422:	bf2c      	ite	cs
   b4424:	4620      	movcs	r0, r4
   b4426:	2000      	movcc	r0, #0
   b4428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000b442c <_ZN4MQTT5writeEhPht>:
        return _client.write(buffer, length);
    }
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   b442c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b4430:	4615      	mov	r5, r2
   b4432:	461e      	mov	r6, r3
    uint8_t lenBuf[4];
    uint8_t llen = 0;
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
   b4434:	461a      	mov	r2, r3
bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   b4436:	4607      	mov	r7, r0
    uint8_t llen = 0;
   b4438:	2300      	movs	r3, #0
    do {
        digit = len % 128;
   b443a:	4696      	mov	lr, r2
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
   b443c:	a802      	add	r0, sp, #8
        digit = len % 128;
   b443e:	f002 0c7f 	and.w	ip, r2, #127	; 0x7f
        if (len > 0) {
   b4442:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        lenBuf[pos++] = digit;
   b4446:	f103 0401 	add.w	r4, r3, #1
   b444a:	4403      	add	r3, r0
            digit |= 0x80;
   b444c:	bf88      	it	hi
   b444e:	f04c 0c80 	orrhi.w	ip, ip, #128	; 0x80
        llen++;
    } while(len > 0);
   b4452:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        len = len / 128;
   b4456:	ea4f 12d2 	mov.w	r2, r2, lsr #7
        lenBuf[pos++] = digit;
   b445a:	b2e4      	uxtb	r4, r4
   b445c:	f803 cc04 	strb.w	ip, [r3, #-4]
    } while(len > 0);
   b4460:	d81e      	bhi.n	b44a0 <_ZN4MQTT5writeEhPht+0x74>

    buf[4-llen] = header;
   b4462:	f1c4 0304 	rsb	r3, r4, #4
    for (int i = 0; i < llen; i++) {
        buf[5-llen+i] = lenBuf[i];
   b4466:	f1c4 0005 	rsb	r0, r4, #5
    buf[4-llen] = header;
   b446a:	54e9      	strb	r1, [r5, r3]
        buf[5-llen+i] = lenBuf[i];
   b446c:	4622      	mov	r2, r4
   b446e:	a901      	add	r1, sp, #4
   b4470:	4428      	add	r0, r5
    buf[4-llen] = header;
   b4472:	eb05 0803 	add.w	r8, r5, r3
        buf[5-llen+i] = lenBuf[i];
   b4476:	f001 fe33 	bl	b60e0 <memcpy>
    }
    rc = _client.write(buf+(4-llen), length+1+llen);
   b447a:	1c72      	adds	r2, r6, #1
   b447c:	4422      	add	r2, r4
   b447e:	4641      	mov	r1, r8
   b4480:	4638      	mov	r0, r7
   b4482:	f000 ffee 	bl	b5462 <_ZN9TCPClient5writeEPKhj>
   b4486:	4605      	mov	r5, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b4488:	f000 fb72 	bl	b4b70 <HAL_Timer_Get_Milli_Seconds>

    lastOutActivity = millis();
    return (rc == 1+llen+length);
   b448c:	1c62      	adds	r2, r4, #1
    lastOutActivity = millis();
   b448e:	6278      	str	r0, [r7, #36]	; 0x24
    return (rc == 1+llen+length);
   b4490:	4432      	add	r2, r6
   b4492:	b2a8      	uxth	r0, r5
}
   b4494:	1a13      	subs	r3, r2, r0
   b4496:	4258      	negs	r0, r3
   b4498:	4158      	adcs	r0, r3
   b449a:	b002      	add	sp, #8
   b449c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lenBuf[pos++] = digit;
   b44a0:	4623      	mov	r3, r4
   b44a2:	e7ca      	b.n	b443a <_ZN4MQTT5writeEhPht+0xe>

000b44a4 <_ZN4MQTT11writeStringEPKcPht>:
}

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
   b44a4:	3302      	adds	r3, #2
uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
   b44a6:	b5f0      	push	{r4, r5, r6, r7, lr}
   b44a8:	4605      	mov	r5, r0
    pos += 2;
   b44aa:	b298      	uxth	r0, r3
   b44ac:	2300      	movs	r3, #0
    while (*idp && pos < this->maxpacketsize) {
   b44ae:	5cce      	ldrb	r6, [r1, r3]
   b44b0:	b29c      	uxth	r4, r3
   b44b2:	b156      	cbz	r6, b44ca <_ZN4MQTT11writeStringEPKcPht+0x26>
   b44b4:	f8b5 c054 	ldrh.w	ip, [r5, #84]	; 0x54
   b44b8:	4584      	cmp	ip, r0
   b44ba:	f103 0701 	add.w	r7, r3, #1
   b44be:	d904      	bls.n	b44ca <_ZN4MQTT11writeStringEPKcPht+0x26>
        buf[pos++] = *idp++;
   b44c0:	1c44      	adds	r4, r0, #1
   b44c2:	5416      	strb	r6, [r2, r0]
    while (*idp && pos < this->maxpacketsize) {
   b44c4:	463b      	mov	r3, r7
        buf[pos++] = *idp++;
   b44c6:	b2a0      	uxth	r0, r4
    while (*idp && pos < this->maxpacketsize) {
   b44c8:	e7f1      	b.n	b44ae <_ZN4MQTT11writeStringEPKcPht+0xa>
        i++;
    }
    buf[pos-i-2] = (i >> 8);
   b44ca:	b299      	uxth	r1, r3
   b44cc:	1a41      	subs	r1, r0, r1
   b44ce:	440a      	add	r2, r1
   b44d0:	0a21      	lsrs	r1, r4, #8
   b44d2:	f802 1c02 	strb.w	r1, [r2, #-2]
    buf[pos-i-1] = (i & 0xFF);
   b44d6:	f802 3c01 	strb.w	r3, [r2, #-1]
    return pos;
}
   b44da:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b44dc <_ZN4MQTT11isConnectedEv>:


bool MQTT::isConnected() {
   b44dc:	b538      	push	{r3, r4, r5, lr}
   b44de:	4604      	mov	r4, r0
    bool rc = (int)_client.connected();
   b44e0:	f001 f90c 	bl	b56fc <_ZN9TCPClient9connectedEv>
   b44e4:	2800      	cmp	r0, #0
   b44e6:	bf14      	ite	ne
   b44e8:	2501      	movne	r5, #1
   b44ea:	2500      	moveq	r5, #0
    if (!rc) _client.stop();
   b44ec:	d102      	bne.n	b44f4 <_ZN4MQTT11isConnectedEv+0x18>
   b44ee:	4620      	mov	r0, r4
   b44f0:	f001 fa3c 	bl	b596c <_ZN9TCPClient4stopEv>
    return rc;
}
   b44f4:	4628      	mov	r0, r5
   b44f6:	bd38      	pop	{r3, r4, r5, pc}

000b44f8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>:
bool MQTT::connect(const char *id, const char *user, const char *pass, const char* willTopic, EMQTT_QOS willQos, uint8_t willRetain, const char* willMessage, bool cleanSession, MQTT_VERSION version) {
   b44f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b44fc:	b088      	sub	sp, #32
   b44fe:	4604      	mov	r4, r0
   b4500:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   b4504:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b4508:	4689      	mov	r9, r1
   b450a:	4617      	mov	r7, r2
   b450c:	461e      	mov	r6, r3
    if (!isConnected()) {
   b450e:	f7ff ffe5 	bl	b44dc <_ZN4MQTT11isConnectedEv>
   b4512:	4605      	mov	r5, r0
   b4514:	2800      	cmp	r0, #0
   b4516:	f040 80cd 	bne.w	b46b4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1bc>
        MutexLocker lock(this);
   b451a:	4621      	mov	r1, r4
   b451c:	a801      	add	r0, sp, #4
   b451e:	f7ff febd 	bl	b429c <_ZN4MQTT11MutexLockerC1EPS_>
        if (ip == NULL)
   b4522:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b4524:	2900      	cmp	r1, #0
   b4526:	f040 8088 	bne.w	b463a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x142>
            result = _client.connect(this->domain.c_str(), this->port);
   b452a:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   b452e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   b4530:	462b      	mov	r3, r5
   b4532:	4620      	mov	r0, r4
   b4534:	f001 f864 	bl	b5600 <_ZN9TCPClient7connectEPKctm>
        if (result) {
   b4538:	2800      	cmp	r0, #0
   b453a:	d07a      	beq.n	b4632 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
            nextMsgId = 1;
   b453c:	2301      	movs	r3, #1
   b453e:	8423      	strh	r3, [r4, #32]
            if (version == MQTT_V311) {
   b4540:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   b4544:	69e2      	ldr	r2, [r4, #28]
            if (version == MQTT_V311) {
   b4546:	2b04      	cmp	r3, #4
   b4548:	4b5b      	ldr	r3, [pc, #364]	; (b46b8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1c0>)
   b454a:	f040 8081 	bne.w	b4650 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x158>
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
   b454e:	6818      	ldr	r0, [r3, #0]
   b4550:	8899      	ldrh	r1, [r3, #4]
   b4552:	799b      	ldrb	r3, [r3, #6]
   b4554:	f8ad 100c 	strh.w	r1, [sp, #12]
   b4558:	f88d 300e 	strb.w	r3, [sp, #14]
   b455c:	9002      	str	r0, [sp, #8]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   b455e:	f8c2 0005 	str.w	r0, [r2, #5]
   b4562:	f89d 300e 	ldrb.w	r3, [sp, #14]
   b4566:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   b456a:	f8a2 1009 	strh.w	r1, [r2, #9]
   b456e:	72d3      	strb	r3, [r2, #11]
                length+=sizeof(MQTT_HEADER_V311);
   b4570:	230c      	movs	r3, #12
            if (willTopic) {
   b4572:	f1b8 0f00 	cmp.w	r8, #0
   b4576:	f000 8081 	beq.w	b467c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x184>
                v = 0x06|(willQos<<3)|(willRetain<<5);
   b457a:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
   b457e:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   b4582:	0140      	lsls	r0, r0, #5
   b4584:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
   b4588:	f040 0006 	orr.w	r0, r0, #6
   b458c:	b2c0      	uxtb	r0, r0
            if (!cleanSession) {
   b458e:	f1ba 0f00 	cmp.w	sl, #0
   b4592:	d101      	bne.n	b4598 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xa0>
              v = v&0xfd;
   b4594:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
            if(user != NULL) {
   b4598:	b11f      	cbz	r7, b45a2 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
                if(pass != NULL) {
   b459a:	2e00      	cmp	r6, #0
   b459c:	d170      	bne.n	b4680 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x188>
                v = v|0x80;
   b459e:	f040 0080 	orr.w	r0, r0, #128	; 0x80
            buffer[length++] = v;
   b45a2:	69e2      	ldr	r2, [r4, #28]
   b45a4:	54d0      	strb	r0, [r2, r3]
            buffer[length++] = ((this->keepalive) >> 8);
   b45a6:	6d22      	ldr	r2, [r4, #80]	; 0x50
   b45a8:	69e1      	ldr	r1, [r4, #28]
   b45aa:	1c58      	adds	r0, r3, #1
   b45ac:	1212      	asrs	r2, r2, #8
   b45ae:	540a      	strb	r2, [r1, r0]
            buffer[length++] = ((this->keepalive) & 0xFF);
   b45b0:	1c9a      	adds	r2, r3, #2
   b45b2:	69e1      	ldr	r1, [r4, #28]
   b45b4:	6d20      	ldr	r0, [r4, #80]	; 0x50
   b45b6:	5488      	strb	r0, [r1, r2]
            length = writeString(id, buffer, length);
   b45b8:	3303      	adds	r3, #3
   b45ba:	69e2      	ldr	r2, [r4, #28]
   b45bc:	4649      	mov	r1, r9
   b45be:	4620      	mov	r0, r4
   b45c0:	f7ff ff70 	bl	b44a4 <_ZN4MQTT11writeStringEPKcPht>
   b45c4:	4603      	mov	r3, r0
            if (willTopic) {
   b45c6:	f1b8 0f00 	cmp.w	r8, #0
   b45ca:	d00b      	beq.n	b45e4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xec>
                length = writeString(willTopic, buffer, length);
   b45cc:	69e2      	ldr	r2, [r4, #28]
   b45ce:	4641      	mov	r1, r8
   b45d0:	4620      	mov	r0, r4
   b45d2:	f7ff ff67 	bl	b44a4 <_ZN4MQTT11writeStringEPKcPht>
                length = writeString(willMessage, buffer, length);
   b45d6:	69e2      	ldr	r2, [r4, #28]
   b45d8:	9913      	ldr	r1, [sp, #76]	; 0x4c
                length = writeString(willTopic, buffer, length);
   b45da:	4603      	mov	r3, r0
                length = writeString(willMessage, buffer, length);
   b45dc:	4620      	mov	r0, r4
   b45de:	f7ff ff61 	bl	b44a4 <_ZN4MQTT11writeStringEPKcPht>
   b45e2:	4603      	mov	r3, r0
            if(user != NULL) {
   b45e4:	b167      	cbz	r7, b4600 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x108>
                length = writeString(user,buffer,length);
   b45e6:	69e2      	ldr	r2, [r4, #28]
   b45e8:	4639      	mov	r1, r7
   b45ea:	4620      	mov	r0, r4
   b45ec:	f7ff ff5a 	bl	b44a4 <_ZN4MQTT11writeStringEPKcPht>
   b45f0:	4603      	mov	r3, r0
                if(pass != NULL) {
   b45f2:	b12e      	cbz	r6, b4600 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x108>
                    length = writeString(pass,buffer,length);
   b45f4:	69e2      	ldr	r2, [r4, #28]
   b45f6:	4631      	mov	r1, r6
   b45f8:	4620      	mov	r0, r4
   b45fa:	f7ff ff53 	bl	b44a4 <_ZN4MQTT11writeStringEPKcPht>
   b45fe:	4603      	mov	r3, r0
            write(MQTTCONNECT, buffer, length-5);
   b4600:	3b05      	subs	r3, #5
   b4602:	69e2      	ldr	r2, [r4, #28]
   b4604:	b29b      	uxth	r3, r3
   b4606:	2110      	movs	r1, #16
   b4608:	4620      	mov	r0, r4
   b460a:	f7ff ff0f 	bl	b442c <_ZN4MQTT5writeEhPht>
   b460e:	f000 faaf 	bl	b4b70 <HAL_Timer_Get_Milli_Seconds>
            lastInActivity = lastOutActivity = millis();
   b4612:	e9c4 0009 	strd	r0, r0, [r4, #36]	; 0x24
                if (t-lastInActivity > this->keepalive*1000UL) {
   b4616:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
            while (!_client.available()) {
   b461a:	4620      	mov	r0, r4
   b461c:	f001 f94c 	bl	b58b8 <_ZN9TCPClient9availableEv>
   b4620:	bb88      	cbnz	r0, b4686 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x18e>
   b4622:	f000 faa5 	bl	b4b70 <HAL_Timer_Get_Milli_Seconds>
                if (t-lastInActivity > this->keepalive*1000UL) {
   b4626:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   b4628:	1ac0      	subs	r0, r0, r3
   b462a:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b462c:	4373      	muls	r3, r6
   b462e:	4298      	cmp	r0, r3
   b4630:	d9f3      	bls.n	b461a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x122>
        _client.stop();
   b4632:	4620      	mov	r0, r4
   b4634:	f001 f99a 	bl	b596c <_ZN9TCPClient4stopEv>
   b4638:	e035      	b.n	b46a6 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1ae>
            result = _client.connect(this->ip, this->port);
   b463a:	a802      	add	r0, sp, #8
   b463c:	f000 fd04 	bl	b5048 <_ZN9IPAddressC1EPKh>
   b4640:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   b4644:	462b      	mov	r3, r5
   b4646:	a902      	add	r1, sp, #8
   b4648:	4620      	mov	r0, r4
   b464a:	f001 f8b9 	bl	b57c0 <_ZN9TCPClient7connectE9IPAddresstm>
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b464e:	e773      	b.n	b4538 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x40>
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
   b4650:	f8d3 0007 	ldr.w	r0, [r3, #7]
   b4654:	f8d3 100b 	ldr.w	r1, [r3, #11]
   b4658:	7bdb      	ldrb	r3, [r3, #15]
   b465a:	f10d 0c08 	add.w	ip, sp, #8
   b465e:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   b4662:	f88c 3000 	strb.w	r3, [ip]
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
   b4666:	ab02      	add	r3, sp, #8
   b4668:	cb03      	ldmia	r3!, {r0, r1}
   b466a:	f8c2 0005 	str.w	r0, [r2, #5]
   b466e:	f8c2 1009 	str.w	r1, [r2, #9]
   b4672:	f89c 3000 	ldrb.w	r3, [ip]
   b4676:	7353      	strb	r3, [r2, #13]
                length+=sizeof(MQTT_HEADER_V31);
   b4678:	230e      	movs	r3, #14
   b467a:	e77a      	b.n	b4572 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x7a>
                v = 0x02;
   b467c:	2002      	movs	r0, #2
   b467e:	e786      	b.n	b458e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x96>
                    v = v|(0x80>>1);
   b4680:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
   b4684:	e78d      	b.n	b45a2 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
            uint16_t len = readPacket(&llen);
   b4686:	a902      	add	r1, sp, #8
   b4688:	4620      	mov	r0, r4
   b468a:	f7ff fe7d 	bl	b4388 <_ZN4MQTT10readPacketEPh>
            if (len == 4) {
   b468e:	2804      	cmp	r0, #4
   b4690:	d1cf      	bne.n	b4632 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
                if (buffer[3] == CONN_ACCEPT) {
   b4692:	69e3      	ldr	r3, [r4, #28]
   b4694:	78de      	ldrb	r6, [r3, #3]
   b4696:	2e00      	cmp	r6, #0
   b4698:	d1cb      	bne.n	b4632 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
   b469a:	f000 fa69 	bl	b4b70 <HAL_Timer_Get_Milli_Seconds>
                    return true;
   b469e:	2501      	movs	r5, #1
                    lastInActivity = millis();
   b46a0:	62a0      	str	r0, [r4, #40]	; 0x28
                    pingOutstanding = false;
   b46a2:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
        MutexLocker lock(this);
   b46a6:	a801      	add	r0, sp, #4
   b46a8:	f7ff fe03 	bl	b42b2 <_ZN4MQTT11MutexLockerD1Ev>
}
   b46ac:	4628      	mov	r0, r5
   b46ae:	b008      	add	sp, #32
   b46b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return false;
   b46b4:	2500      	movs	r5, #0
   b46b6:	e7f9      	b.n	b46ac <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1b4>
   b46b8:	000b6244 	.word	0x000b6244

000b46bc <_ZN4MQTT7connectEPKc>:
bool MQTT::connect(const char *id) {
   b46bc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    return connect(id, NULL, NULL, 0, QOS0, 0, 0, true);
   b46be:	2301      	movs	r3, #1
   b46c0:	2204      	movs	r2, #4
   b46c2:	e9cd 3204 	strd	r3, r2, [sp, #16]
   b46c6:	2300      	movs	r3, #0
   b46c8:	e9cd 3302 	strd	r3, r3, [sp, #8]
   b46cc:	e9cd 3300 	strd	r3, r3, [sp]
   b46d0:	461a      	mov	r2, r3
   b46d2:	f7ff ff11 	bl	b44f8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>
}
   b46d6:	b007      	add	sp, #28
   b46d8:	f85d fb04 	ldr.w	pc, [sp], #4

000b46dc <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>:
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   b46dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b46e0:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
   b46e4:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
   b46e8:	f89d 9038 	ldrb.w	r9, [sp, #56]	; 0x38
   b46ec:	4604      	mov	r4, r0
   b46ee:	468b      	mov	fp, r1
   b46f0:	4616      	mov	r6, r2
   b46f2:	461f      	mov	r7, r3
    if (isConnected()) {
   b46f4:	f7ff fef2 	bl	b44dc <_ZN4MQTT11isConnectedEv>
   b46f8:	4682      	mov	sl, r0
   b46fa:	2800      	cmp	r0, #0
   b46fc:	d051      	beq.n	b47a2 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xc6>
        MutexLocker lock(this);
   b46fe:	4621      	mov	r1, r4
   b4700:	a801      	add	r0, sp, #4
   b4702:	f7ff fdcb 	bl	b429c <_ZN4MQTT11MutexLockerC1EPS_>
        memset(buffer, 0, this->maxpacketsize);
   b4706:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54
   b470a:	69e0      	ldr	r0, [r4, #28]
   b470c:	2100      	movs	r1, #0
   b470e:	f001 fcf5 	bl	b60fc <memset>
        length = writeString(topic, buffer, length);
   b4712:	2305      	movs	r3, #5
   b4714:	69e2      	ldr	r2, [r4, #28]
   b4716:	4659      	mov	r1, fp
   b4718:	4620      	mov	r0, r4
   b471a:	f7ff fec3 	bl	b44a4 <_ZN4MQTT11writeStringEPKcPht>
        if (qos == QOS2 || qos == QOS1) {
   b471e:	1e6b      	subs	r3, r5, #1
   b4720:	2b01      	cmp	r3, #1
   b4722:	d815      	bhi.n	b4750 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x74>
            nextMsgId += 1;
   b4724:	8c21      	ldrh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   b4726:	69e3      	ldr	r3, [r4, #28]
            nextMsgId += 1;
   b4728:	3101      	adds	r1, #1
   b472a:	b289      	uxth	r1, r1
   b472c:	8421      	strh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   b472e:	0a09      	lsrs	r1, r1, #8
   b4730:	5419      	strb	r1, [r3, r0]
   b4732:	1c42      	adds	r2, r0, #1
            buffer[length++] = (nextMsgId & 0xFF);
   b4734:	69e3      	ldr	r3, [r4, #28]
   b4736:	8c21      	ldrh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   b4738:	b292      	uxth	r2, r2
            buffer[length++] = (nextMsgId & 0xFF);
   b473a:	3002      	adds	r0, #2
   b473c:	5499      	strb	r1, [r3, r2]
   b473e:	b280      	uxth	r0, r0
            if (messageid != NULL)
   b4740:	f1b8 0f00 	cmp.w	r8, #0
   b4744:	d004      	beq.n	b4750 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x74>
                *messageid = nextMsgId++;
   b4746:	8c23      	ldrh	r3, [r4, #32]
   b4748:	1c5a      	adds	r2, r3, #1
   b474a:	8422      	strh	r2, [r4, #32]
   b474c:	f8a8 3000 	strh.w	r3, [r8]
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   b4750:	2100      	movs	r1, #0
   b4752:	180b      	adds	r3, r1, r0
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   b4754:	428f      	cmp	r7, r1
            buffer[length++] = payload[i];
   b4756:	69e2      	ldr	r2, [r4, #28]
   b4758:	b29b      	uxth	r3, r3
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   b475a:	d90a      	bls.n	b4772 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
   b475c:	f8b4 c054 	ldrh.w	ip, [r4, #84]	; 0x54
   b4760:	459c      	cmp	ip, r3
   b4762:	d906      	bls.n	b4772 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
            buffer[length++] = payload[i];
   b4764:	f816 c001 	ldrb.w	ip, [r6, r1]
   b4768:	f802 c003 	strb.w	ip, [r2, r3]
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   b476c:	3101      	adds	r1, #1
   b476e:	b289      	uxth	r1, r1
   b4770:	e7ef      	b.n	b4752 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x76>
            header |= 1;
   b4772:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
   b4776:	2900      	cmp	r1, #0
   b4778:	bf0c      	ite	eq
   b477a:	2130      	moveq	r1, #48	; 0x30
   b477c:	2131      	movne	r1, #49	; 0x31
        if (dup) {
   b477e:	f1b9 0f00 	cmp.w	r9, #0
   b4782:	d001      	beq.n	b4788 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xac>
            header |= DUP_FLAG_ON_MASK;
   b4784:	f041 0108 	orr.w	r1, r1, #8
        if (qos == QOS2)
   b4788:	2d02      	cmp	r5, #2
   b478a:	d10e      	bne.n	b47aa <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xce>
            header |= MQTTQOS2_HEADER_MASK;
   b478c:	f041 0104 	orr.w	r1, r1, #4
        return write(header, buffer, length-5);
   b4790:	3b05      	subs	r3, #5
   b4792:	b29b      	uxth	r3, r3
   b4794:	4620      	mov	r0, r4
   b4796:	f7ff fe49 	bl	b442c <_ZN4MQTT5writeEhPht>
   b479a:	4682      	mov	sl, r0
        MutexLocker lock(this);
   b479c:	a801      	add	r0, sp, #4
   b479e:	f7ff fd88 	bl	b42b2 <_ZN4MQTT11MutexLockerD1Ev>
}
   b47a2:	4650      	mov	r0, sl
   b47a4:	b003      	add	sp, #12
   b47a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if (qos == QOS1)
   b47aa:	2d01      	cmp	r5, #1
            header |= MQTTQOS1_HEADER_MASK;
   b47ac:	bf08      	it	eq
   b47ae:	f041 0102 	orreq.w	r1, r1, #2
   b47b2:	e7ed      	b.n	b4790 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xb4>

000b47b4 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>:
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
   b47b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return publish(topic, payload, plength, retain, qos, false, messageid);
   b47b6:	9c08      	ldr	r4, [sp, #32]
   b47b8:	9403      	str	r4, [sp, #12]
   b47ba:	2400      	movs	r4, #0
   b47bc:	9402      	str	r4, [sp, #8]
   b47be:	f89d 401c 	ldrb.w	r4, [sp, #28]
   b47c2:	9401      	str	r4, [sp, #4]
   b47c4:	f89d 4018 	ldrb.w	r4, [sp, #24]
   b47c8:	9400      	str	r4, [sp, #0]
   b47ca:	f7ff ff87 	bl	b46dc <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>
}
   b47ce:	b004      	add	sp, #16
   b47d0:	bd10      	pop	{r4, pc}

000b47d2 <_ZN4MQTT7publishEPKcS1_>:
bool MQTT::publish(const char* topic, const char* payload) {
   b47d2:	b530      	push	{r4, r5, lr}
   b47d4:	b087      	sub	sp, #28
   b47d6:	4604      	mov	r4, r0
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
   b47d8:	4610      	mov	r0, r2
bool MQTT::publish(const char* topic, const char* payload) {
   b47da:	9105      	str	r1, [sp, #20]
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
   b47dc:	9204      	str	r2, [sp, #16]
   b47de:	f7ff fc27 	bl	b4030 <strlen>
   b47e2:	2500      	movs	r5, #0
   b47e4:	4603      	mov	r3, r0
   b47e6:	e9cd 5501 	strd	r5, r5, [sp, #4]
   b47ea:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
   b47ee:	9500      	str	r5, [sp, #0]
   b47f0:	4620      	mov	r0, r4
   b47f2:	f7ff ffdf 	bl	b47b4 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>
}
   b47f6:	b007      	add	sp, #28
   b47f8:	bd30      	pop	{r4, r5, pc}

000b47fa <_ZN4MQTT14publishReleaseEt>:
bool MQTT::publishRelease(uint16_t messageid) {
   b47fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b47fc:	4604      	mov	r4, r0
   b47fe:	460e      	mov	r6, r1
    if (isConnected()) {
   b4800:	f7ff fe6c 	bl	b44dc <_ZN4MQTT11isConnectedEv>
   b4804:	4605      	mov	r5, r0
   b4806:	b1c8      	cbz	r0, b483c <_ZN4MQTT14publishReleaseEt+0x42>
        MutexLocker lock(this);
   b4808:	4621      	mov	r1, r4
   b480a:	a801      	add	r0, sp, #4
   b480c:	f7ff fd46 	bl	b429c <_ZN4MQTT11MutexLockerC1EPS_>
        buffer[length++] = MQTTPUBREL | MQTTQOS1_HEADER_MASK;
   b4810:	69e3      	ldr	r3, [r4, #28]
   b4812:	2262      	movs	r2, #98	; 0x62
   b4814:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   b4816:	69e3      	ldr	r3, [r4, #28]
   b4818:	2202      	movs	r2, #2
   b481a:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   b481c:	69e3      	ldr	r3, [r4, #28]
   b481e:	0a32      	lsrs	r2, r6, #8
   b4820:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   b4822:	69e3      	ldr	r3, [r4, #28]
   b4824:	70de      	strb	r6, [r3, #3]
        return _client.write(buffer, length);
   b4826:	69e1      	ldr	r1, [r4, #28]
   b4828:	2204      	movs	r2, #4
   b482a:	4620      	mov	r0, r4
   b482c:	f000 fe19 	bl	b5462 <_ZN9TCPClient5writeEPKhj>
   b4830:	1e05      	subs	r5, r0, #0
        MutexLocker lock(this);
   b4832:	a801      	add	r0, sp, #4
        return _client.write(buffer, length);
   b4834:	bf18      	it	ne
   b4836:	2501      	movne	r5, #1
        MutexLocker lock(this);
   b4838:	f7ff fd3b 	bl	b42b2 <_ZN4MQTT11MutexLockerD1Ev>
}
   b483c:	4628      	mov	r0, r5
   b483e:	b002      	add	sp, #8
   b4840:	bd70      	pop	{r4, r5, r6, pc}

000b4842 <_ZN4MQTT15publishCompleteEt>:
bool MQTT::publishComplete(uint16_t messageid) {
   b4842:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b4844:	4604      	mov	r4, r0
   b4846:	460e      	mov	r6, r1
    if (isConnected()) {
   b4848:	f7ff fe48 	bl	b44dc <_ZN4MQTT11isConnectedEv>
   b484c:	4605      	mov	r5, r0
   b484e:	b1c8      	cbz	r0, b4884 <_ZN4MQTT15publishCompleteEt+0x42>
        MutexLocker lock(this);
   b4850:	4621      	mov	r1, r4
   b4852:	a801      	add	r0, sp, #4
   b4854:	f7ff fd22 	bl	b429c <_ZN4MQTT11MutexLockerC1EPS_>
        buffer[length++] = MQTTPUBCOMP | MQTTQOS1_HEADER_MASK;
   b4858:	69e3      	ldr	r3, [r4, #28]
   b485a:	2272      	movs	r2, #114	; 0x72
   b485c:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   b485e:	69e3      	ldr	r3, [r4, #28]
   b4860:	2202      	movs	r2, #2
   b4862:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   b4864:	69e3      	ldr	r3, [r4, #28]
   b4866:	0a32      	lsrs	r2, r6, #8
   b4868:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   b486a:	69e3      	ldr	r3, [r4, #28]
   b486c:	70de      	strb	r6, [r3, #3]
        return _client.write(buffer, length);
   b486e:	69e1      	ldr	r1, [r4, #28]
   b4870:	2204      	movs	r2, #4
   b4872:	4620      	mov	r0, r4
   b4874:	f000 fdf5 	bl	b5462 <_ZN9TCPClient5writeEPKhj>
   b4878:	1e05      	subs	r5, r0, #0
        MutexLocker lock(this);
   b487a:	a801      	add	r0, sp, #4
        return _client.write(buffer, length);
   b487c:	bf18      	it	ne
   b487e:	2501      	movne	r5, #1
        MutexLocker lock(this);
   b4880:	f7ff fd17 	bl	b42b2 <_ZN4MQTT11MutexLockerD1Ev>
}
   b4884:	4628      	mov	r0, r5
   b4886:	b002      	add	sp, #8
   b4888:	bd70      	pop	{r4, r5, r6, pc}

000b488a <_ZN4MQTT4loopEv>:
bool MQTT::loop() {
   b488a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b488e:	ed2d 8b02 	vpush	{d8}
   b4892:	b087      	sub	sp, #28
   b4894:	af00      	add	r7, sp, #0
   b4896:	4604      	mov	r4, r0
    if (isConnected()) {
   b4898:	f7ff fe20 	bl	b44dc <_ZN4MQTT11isConnectedEv>
   b489c:	4681      	mov	r9, r0
   b489e:	b1f8      	cbz	r0, b48e0 <_ZN4MQTT4loopEv+0x56>
        MutexLocker lock(this);
   b48a0:	4621      	mov	r1, r4
   b48a2:	f107 0014 	add.w	r0, r7, #20
   b48a6:	f7ff fcf9 	bl	b429c <_ZN4MQTT11MutexLockerC1EPS_>
   b48aa:	f000 f961 	bl	b4b70 <HAL_Timer_Get_Milli_Seconds>
        if ((t - lastInActivity > this->keepalive*1000UL) || (t - lastOutActivity > this->keepalive*1000UL)) {
   b48ae:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b48b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b48b4:	4353      	muls	r3, r2
   b48b6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   b48b8:	1a82      	subs	r2, r0, r2
   b48ba:	429a      	cmp	r2, r3
   b48bc:	4606      	mov	r6, r0
   b48be:	d803      	bhi.n	b48c8 <_ZN4MQTT4loopEv+0x3e>
   b48c0:	6a62      	ldr	r2, [r4, #36]	; 0x24
   b48c2:	1a82      	subs	r2, r0, r2
   b48c4:	4293      	cmp	r3, r2
   b48c6:	d221      	bcs.n	b490c <_ZN4MQTT4loopEv+0x82>
            if (pingOutstanding) {
   b48c8:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   b48cc:	b17b      	cbz	r3, b48ee <_ZN4MQTT4loopEv+0x64>
                _client.stop();
   b48ce:	4620      	mov	r0, r4
   b48d0:	f001 f84c 	bl	b596c <_ZN9TCPClient4stopEv>
                return false;
   b48d4:	f04f 0900 	mov.w	r9, #0
        MutexLocker lock(this);
   b48d8:	f107 0014 	add.w	r0, r7, #20
   b48dc:	f7ff fce9 	bl	b42b2 <_ZN4MQTT11MutexLockerD1Ev>
}
   b48e0:	4648      	mov	r0, r9
   b48e2:	371c      	adds	r7, #28
   b48e4:	46bd      	mov	sp, r7
   b48e6:	ecbd 8b02 	vpop	{d8}
   b48ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                buffer[0] = MQTTPINGREQ;
   b48ee:	69e2      	ldr	r2, [r4, #28]
   b48f0:	21c0      	movs	r1, #192	; 0xc0
   b48f2:	7011      	strb	r1, [r2, #0]
                buffer[1] = 0;
   b48f4:	69e2      	ldr	r2, [r4, #28]
   b48f6:	7053      	strb	r3, [r2, #1]
                _client.write(buffer,2);
   b48f8:	69e1      	ldr	r1, [r4, #28]
   b48fa:	2202      	movs	r2, #2
   b48fc:	4620      	mov	r0, r4
   b48fe:	f000 fdb0 	bl	b5462 <_ZN9TCPClient5writeEPKhj>
                lastInActivity = t;
   b4902:	e9c4 6609 	strd	r6, r6, [r4, #36]	; 0x24
                pingOutstanding = true;
   b4906:	2301      	movs	r3, #1
   b4908:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
        if (_client.available()) {
   b490c:	4620      	mov	r0, r4
   b490e:	f000 ffd3 	bl	b58b8 <_ZN9TCPClient9availableEv>
   b4912:	2800      	cmp	r0, #0
   b4914:	d0e0      	beq.n	b48d8 <_ZN4MQTT4loopEv+0x4e>
            uint16_t len = readPacket(&llen);
   b4916:	f107 0113 	add.w	r1, r7, #19
   b491a:	4620      	mov	r0, r4
   b491c:	f7ff fd34 	bl	b4388 <_ZN4MQTT10readPacketEPh>
            if (len > 0) {
   b4920:	4683      	mov	fp, r0
   b4922:	2800      	cmp	r0, #0
   b4924:	d0d8      	beq.n	b48d8 <_ZN4MQTT4loopEv+0x4e>
                uint8_t type = buffer[0]&0xF0;
   b4926:	69e3      	ldr	r3, [r4, #28]
                lastInActivity = t;
   b4928:	62a6      	str	r6, [r4, #40]	; 0x28
                uint8_t type = buffer[0]&0xF0;
   b492a:	7819      	ldrb	r1, [r3, #0]
   b492c:	f001 02f0 	and.w	r2, r1, #240	; 0xf0
                if (type == MQTTPUBLISH) {
   b4930:	2a30      	cmp	r2, #48	; 0x30
   b4932:	d17f      	bne.n	b4a34 <_ZN4MQTT4loopEv+0x1aa>
                    if (callback) {
   b4934:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
   b4938:	f1ba 0f00 	cmp.w	sl, #0
   b493c:	d0cc      	beq.n	b48d8 <_ZN4MQTT4loopEv+0x4e>
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   b493e:	f897 c013 	ldrb.w	ip, [r7, #19]
                        }
   b4942:	466a      	mov	r2, sp
   b4944:	ee08 2a10 	vmov	s16, r2
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   b4948:	eb03 020c 	add.w	r2, r3, ip
   b494c:	7851      	ldrb	r1, [r2, #1]
   b494e:	7895      	ldrb	r5, [r2, #2]
   b4950:	eb05 2501 	add.w	r5, r5, r1, lsl #8
   b4954:	b2ad      	uxth	r5, r5
                        char topic[tl+1];
   b4956:	f105 0208 	add.w	r2, r5, #8
   b495a:	4669      	mov	r1, sp
   b495c:	08d2      	lsrs	r2, r2, #3
   b495e:	eba1 02c2 	sub.w	r2, r1, r2, lsl #3
   b4962:	4695      	mov	sp, r2
   b4964:	f10c 0203 	add.w	r2, ip, #3
   b4968:	60fa      	str	r2, [r7, #12]
   b496a:	eb03 0e02 	add.w	lr, r3, r2
   b496e:	eb0d 0205 	add.w	r2, sp, r5
   b4972:	4668      	mov	r0, sp
                        for (uint16_t i=0;i<tl;i++) {
   b4974:	f8c7 d008 	str.w	sp, [r7, #8]
   b4978:	607a      	str	r2, [r7, #4]
   b497a:	e9d7 2101 	ldrd	r2, r1, [r7, #4]
   b497e:	428a      	cmp	r2, r1
   b4980:	d006      	beq.n	b4990 <_ZN4MQTT4loopEv+0x106>
                            topic[i] = buffer[llen+3+i];
   b4982:	460a      	mov	r2, r1
   b4984:	f81e 8b01 	ldrb.w	r8, [lr], #1
   b4988:	f802 8b01 	strb.w	r8, [r2], #1
   b498c:	60ba      	str	r2, [r7, #8]
                        for (uint16_t i=0;i<tl;i++) {
   b498e:	e7f4      	b.n	b497a <_ZN4MQTT4loopEv+0xf0>
                        topic[tl] = 0;
   b4990:	2200      	movs	r2, #0
   b4992:	5542      	strb	r2, [r0, r5]
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   b4994:	f893 8000 	ldrb.w	r8, [r3]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b4998:	68f9      	ldr	r1, [r7, #12]
   b499a:	f008 0806 	and.w	r8, r8, #6
                            callback(topic,payload,len-llen-3-tl-2);
   b499e:	ebab 020c 	sub.w	r2, fp, ip
   b49a2:	3a03      	subs	r2, #3
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   b49a4:	f1b8 0f02 	cmp.w	r8, #2
                            callback(topic,payload,len-llen-3-tl-2);
   b49a8:	eba2 0205 	sub.w	r2, r2, r5
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b49ac:	4429      	add	r1, r5
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   b49ae:	d125      	bne.n	b49fc <_ZN4MQTT4loopEv+0x172>
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b49b0:	f813 e001 	ldrb.w	lr, [r3, r1]
   b49b4:	4419      	add	r1, r3
                            callback(topic,payload,len-llen-3-tl-2);
   b49b6:	3a02      	subs	r2, #2
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b49b8:	f891 b001 	ldrb.w	fp, [r1, #1]
                            payload = buffer+llen+3+tl+2;
   b49bc:	f10c 0105 	add.w	r1, ip, #5
   b49c0:	4429      	add	r1, r5
                            callback(topic,payload,len-llen-3-tl-2);
   b49c2:	4419      	add	r1, r3
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b49c4:	eb0b 2b0e 	add.w	fp, fp, lr, lsl #8
                            callback(topic,payload,len-llen-3-tl-2);
   b49c8:	47d0      	blx	sl
                            buffer[0] = MQTTPUBACK; // respond with PUBACK
   b49ca:	69e3      	ldr	r3, [r4, #28]
   b49cc:	2240      	movs	r2, #64	; 0x40
   b49ce:	701a      	strb	r2, [r3, #0]
                            buffer[1] = 2;
   b49d0:	69e3      	ldr	r3, [r4, #28]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b49d2:	fa1f fb8b 	uxth.w	fp, fp
                            buffer[1] = 2;
   b49d6:	f883 8001 	strb.w	r8, [r3, #1]
                            buffer[2] = (msgId >> 8);
   b49da:	69e3      	ldr	r3, [r4, #28]
   b49dc:	ea4f 221b 	mov.w	r2, fp, lsr #8
   b49e0:	709a      	strb	r2, [r3, #2]
                            buffer[3] = (msgId & 0xFF);
   b49e2:	69e3      	ldr	r3, [r4, #28]
   b49e4:	f883 b003 	strb.w	fp, [r3, #3]
                            _client.write(buffer,4);
   b49e8:	69e1      	ldr	r1, [r4, #28]
   b49ea:	2204      	movs	r2, #4
   b49ec:	4620      	mov	r0, r4
   b49ee:	f000 fd38 	bl	b5462 <_ZN9TCPClient5writeEPKhj>
                            lastOutActivity = t;
   b49f2:	6266      	str	r6, [r4, #36]	; 0x24
   b49f4:	ee18 3a10 	vmov	r3, s16
   b49f8:	469d      	mov	sp, r3
   b49fa:	e76d      	b.n	b48d8 <_ZN4MQTT4loopEv+0x4e>
                                    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
   b49fc:	f1b8 0f04 	cmp.w	r8, #4
   b4a00:	d115      	bne.n	b4a2e <_ZN4MQTT4loopEv+0x1a4>
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b4a02:	f813 e001 	ldrb.w	lr, [r3, r1]
   b4a06:	4419      	add	r1, r3
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   b4a08:	3a02      	subs	r2, #2
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b4a0a:	f891 b001 	ldrb.w	fp, [r1, #1]
                                        payload = buffer + llen + 3 + tl + 2;
   b4a0e:	f10c 0105 	add.w	r1, ip, #5
   b4a12:	4429      	add	r1, r5
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   b4a14:	4419      	add	r1, r3
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b4a16:	eb0b 2b0e 	add.w	fp, fp, lr, lsl #8
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   b4a1a:	47d0      	blx	sl
                                        buffer[0] = MQTTPUBREC; // respond with PUBREC
   b4a1c:	69e3      	ldr	r3, [r4, #28]
   b4a1e:	2250      	movs	r2, #80	; 0x50
   b4a20:	701a      	strb	r2, [r3, #0]
                                        buffer[1] = 2;
   b4a22:	69e3      	ldr	r3, [r4, #28]
   b4a24:	2202      	movs	r2, #2
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b4a26:	fa1f fb8b 	uxth.w	fp, fp
                                        buffer[1] = 2;
   b4a2a:	705a      	strb	r2, [r3, #1]
                                        buffer[2] = (msgId >> 8);
   b4a2c:	e7d5      	b.n	b49da <_ZN4MQTT4loopEv+0x150>
                            callback(topic,payload,len-llen-3-tl);
   b4a2e:	4419      	add	r1, r3
   b4a30:	47d0      	blx	sl
   b4a32:	e7df      	b.n	b49f4 <_ZN4MQTT4loopEv+0x16a>
                } else if (type == MQTTPUBREC) {
   b4a34:	2a50      	cmp	r2, #80	; 0x50
   b4a36:	d108      	bne.n	b4a4a <_ZN4MQTT4loopEv+0x1c0>
                    msgId = (buffer[2] << 8) + buffer[3];
   b4a38:	789a      	ldrb	r2, [r3, #2]
   b4a3a:	78d9      	ldrb	r1, [r3, #3]
   b4a3c:	eb01 2102 	add.w	r1, r1, r2, lsl #8
                    this->publishRelease(msgId);
   b4a40:	b289      	uxth	r1, r1
   b4a42:	4620      	mov	r0, r4
   b4a44:	f7ff fed9 	bl	b47fa <_ZN4MQTT14publishReleaseEt>
   b4a48:	e746      	b.n	b48d8 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBACK) {
   b4a4a:	2a40      	cmp	r2, #64	; 0x40
   b4a4c:	d112      	bne.n	b4a74 <_ZN4MQTT4loopEv+0x1ea>
                if (qoscallback) {
   b4a4e:	6b62      	ldr	r2, [r4, #52]	; 0x34
   b4a50:	2a00      	cmp	r2, #0
   b4a52:	f43f af41 	beq.w	b48d8 <_ZN4MQTT4loopEv+0x4e>
                    if (len == 4 && (buffer[0]&0x06) == MQTTQOS0_HEADER_MASK) {
   b4a56:	f1bb 0f04 	cmp.w	fp, #4
   b4a5a:	f47f af3d 	bne.w	b48d8 <_ZN4MQTT4loopEv+0x4e>
   b4a5e:	f011 0f06 	tst.w	r1, #6
   b4a62:	f47f af39 	bne.w	b48d8 <_ZN4MQTT4loopEv+0x4e>
                        msgId = (buffer[2]<<8)+buffer[3];
   b4a66:	7899      	ldrb	r1, [r3, #2]
   b4a68:	78d8      	ldrb	r0, [r3, #3]
   b4a6a:	eb00 2001 	add.w	r0, r0, r1, lsl #8
                        this->qoscallback(msgId);
   b4a6e:	b280      	uxth	r0, r0
   b4a70:	4790      	blx	r2
   b4a72:	e731      	b.n	b48d8 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBREL) {
   b4a74:	2a60      	cmp	r2, #96	; 0x60
   b4a76:	d108      	bne.n	b4a8a <_ZN4MQTT4loopEv+0x200>
                msgId = (buffer[2] << 8) + buffer[3];
   b4a78:	789a      	ldrb	r2, [r3, #2]
   b4a7a:	78d9      	ldrb	r1, [r3, #3]
   b4a7c:	eb01 2102 	add.w	r1, r1, r2, lsl #8
                this->publishComplete(msgId);
   b4a80:	b289      	uxth	r1, r1
   b4a82:	4620      	mov	r0, r4
   b4a84:	f7ff fedd 	bl	b4842 <_ZN4MQTT15publishCompleteEt>
   b4a88:	e726      	b.n	b48d8 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBCOMP) {
   b4a8a:	2a70      	cmp	r2, #112	; 0x70
   b4a8c:	d0df      	beq.n	b4a4e <_ZN4MQTT4loopEv+0x1c4>
                } else if (type == MQTTSUBACK) {
   b4a8e:	2a90      	cmp	r2, #144	; 0x90
   b4a90:	f43f af22 	beq.w	b48d8 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPINGREQ) {
   b4a94:	2ac0      	cmp	r2, #192	; 0xc0
   b4a96:	d10a      	bne.n	b4aae <_ZN4MQTT4loopEv+0x224>
                    buffer[0] = MQTTPINGRESP;
   b4a98:	22d0      	movs	r2, #208	; 0xd0
   b4a9a:	701a      	strb	r2, [r3, #0]
                    buffer[1] = 0;
   b4a9c:	69e3      	ldr	r3, [r4, #28]
   b4a9e:	2200      	movs	r2, #0
   b4aa0:	705a      	strb	r2, [r3, #1]
                    _client.write(buffer,2);
   b4aa2:	69e1      	ldr	r1, [r4, #28]
   b4aa4:	2202      	movs	r2, #2
   b4aa6:	4620      	mov	r0, r4
   b4aa8:	f000 fcdb 	bl	b5462 <_ZN9TCPClient5writeEPKhj>
   b4aac:	e714      	b.n	b48d8 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPINGRESP) {
   b4aae:	2ad0      	cmp	r2, #208	; 0xd0
                    pingOutstanding = false;
   b4ab0:	bf04      	itt	eq
   b4ab2:	2300      	moveq	r3, #0
   b4ab4:	f884 302c 	strbeq.w	r3, [r4, #44]	; 0x2c
   b4ab8:	e70e      	b.n	b48d8 <_ZN4MQTT4loopEv+0x4e>

000b4aba <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>:
bool MQTT::subscribe(const char* topic, EMQTT_QOS qos) {
   b4aba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b4abc:	4604      	mov	r4, r0
   b4abe:	460f      	mov	r7, r1
   b4ac0:	4616      	mov	r6, r2
    if (isConnected()) {
   b4ac2:	f7ff fd0b 	bl	b44dc <_ZN4MQTT11isConnectedEv>
   b4ac6:	4605      	mov	r5, r0
   b4ac8:	b310      	cbz	r0, b4b10 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x56>
        MutexLocker lock(this);
   b4aca:	4621      	mov	r1, r4
   b4acc:	a801      	add	r0, sp, #4
   b4ace:	f7ff fbe5 	bl	b429c <_ZN4MQTT11MutexLockerC1EPS_>
        nextMsgId++;
   b4ad2:	8c23      	ldrh	r3, [r4, #32]
   b4ad4:	3301      	adds	r3, #1
   b4ad6:	b29b      	uxth	r3, r3
        if (nextMsgId == 0) {
   b4ad8:	b1eb      	cbz	r3, b4b16 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x5c>
            nextMsgId = 1;
   b4ada:	8423      	strh	r3, [r4, #32]
        buffer[length++] = (nextMsgId >> 8);
   b4adc:	8c23      	ldrh	r3, [r4, #32]
   b4ade:	69e2      	ldr	r2, [r4, #28]
   b4ae0:	0a1b      	lsrs	r3, r3, #8
   b4ae2:	7153      	strb	r3, [r2, #5]
        buffer[length++] = (nextMsgId & 0xFF);
   b4ae4:	69e3      	ldr	r3, [r4, #28]
   b4ae6:	8c22      	ldrh	r2, [r4, #32]
   b4ae8:	719a      	strb	r2, [r3, #6]
        length = writeString(topic, buffer,length);
   b4aea:	69e2      	ldr	r2, [r4, #28]
   b4aec:	2307      	movs	r3, #7
   b4aee:	4639      	mov	r1, r7
   b4af0:	4620      	mov	r0, r4
   b4af2:	f7ff fcd7 	bl	b44a4 <_ZN4MQTT11writeStringEPKcPht>
        buffer[length++] = qos;
   b4af6:	69e3      	ldr	r3, [r4, #28]
   b4af8:	541e      	strb	r6, [r3, r0]
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
   b4afa:	3804      	subs	r0, #4
   b4afc:	b283      	uxth	r3, r0
   b4afe:	69e2      	ldr	r2, [r4, #28]
   b4b00:	2182      	movs	r1, #130	; 0x82
   b4b02:	4620      	mov	r0, r4
   b4b04:	f7ff fc92 	bl	b442c <_ZN4MQTT5writeEhPht>
   b4b08:	4605      	mov	r5, r0
        MutexLocker lock(this);
   b4b0a:	a801      	add	r0, sp, #4
   b4b0c:	f7ff fbd1 	bl	b42b2 <_ZN4MQTT11MutexLockerD1Ev>
}
   b4b10:	4628      	mov	r0, r5
   b4b12:	b003      	add	sp, #12
   b4b14:	bdf0      	pop	{r4, r5, r6, r7, pc}
            nextMsgId = 1;
   b4b16:	2301      	movs	r3, #1
   b4b18:	e7df      	b.n	b4ada <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x20>

000b4b1a <_ZN4MQTT9subscribeEPKc>:
    return subscribe(topic, QOS0);
   b4b1a:	2200      	movs	r2, #0
   b4b1c:	f7ff bfcd 	b.w	b4aba <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>

000b4b20 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   b4b20:	b508      	push	{r3, lr}
   b4b22:	4b02      	ldr	r3, [pc, #8]	; (b4b2c <os_mutex_create+0xc>)
   b4b24:	681b      	ldr	r3, [r3, #0]
   b4b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4b28:	9301      	str	r3, [sp, #4]
   b4b2a:	bd08      	pop	{r3, pc}
   b4b2c:	00030248 	.word	0x00030248

000b4b30 <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   b4b30:	b508      	push	{r3, lr}
   b4b32:	4b02      	ldr	r3, [pc, #8]	; (b4b3c <os_mutex_lock+0xc>)
   b4b34:	681b      	ldr	r3, [r3, #0]
   b4b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b4b38:	9301      	str	r3, [sp, #4]
   b4b3a:	bd08      	pop	{r3, pc}
   b4b3c:	00030248 	.word	0x00030248

000b4b40 <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   b4b40:	b508      	push	{r3, lr}
   b4b42:	4b02      	ldr	r3, [pc, #8]	; (b4b4c <os_mutex_unlock+0xc>)
   b4b44:	681b      	ldr	r3, [r3, #0]
   b4b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4b48:	9301      	str	r3, [sp, #4]
   b4b4a:	bd08      	pop	{r3, pc}
   b4b4c:	00030248 	.word	0x00030248

000b4b50 <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b4b50:	b508      	push	{r3, lr}
   b4b52:	4b02      	ldr	r3, [pc, #8]	; (b4b5c <os_mutex_recursive_create+0xc>)
   b4b54:	681b      	ldr	r3, [r3, #0]
   b4b56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4b58:	9301      	str	r3, [sp, #4]
   b4b5a:	bd08      	pop	{r3, pc}
   b4b5c:	00030248 	.word	0x00030248

000b4b60 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b4b60:	b508      	push	{r3, lr}
   b4b62:	4b02      	ldr	r3, [pc, #8]	; (b4b6c <HAL_RNG_GetRandomNumber+0xc>)
   b4b64:	681b      	ldr	r3, [r3, #0]
   b4b66:	685b      	ldr	r3, [r3, #4]
   b4b68:	9301      	str	r3, [sp, #4]
   b4b6a:	bd08      	pop	{r3, pc}
   b4b6c:	00030218 	.word	0x00030218

000b4b70 <HAL_Timer_Get_Milli_Seconds>:
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b4b70:	b508      	push	{r3, lr}
   b4b72:	4b02      	ldr	r3, [pc, #8]	; (b4b7c <HAL_Timer_Get_Milli_Seconds+0xc>)
   b4b74:	681b      	ldr	r3, [r3, #0]
   b4b76:	695b      	ldr	r3, [r3, #20]
   b4b78:	9301      	str	r3, [sp, #4]
   b4b7a:	bd08      	pop	{r3, pc}
   b4b7c:	00030218 	.word	0x00030218

000b4b80 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b4b80:	b508      	push	{r3, lr}
   b4b82:	4b02      	ldr	r3, [pc, #8]	; (b4b8c <if_index_to_name+0xc>)
   b4b84:	681b      	ldr	r3, [r3, #0]
   b4b86:	695b      	ldr	r3, [r3, #20]
   b4b88:	9301      	str	r3, [sp, #4]
   b4b8a:	bd08      	pop	{r3, pc}
   b4b8c:	0003026c 	.word	0x0003026c

000b4b90 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b4b90:	b508      	push	{r3, lr}
   b4b92:	4b02      	ldr	r3, [pc, #8]	; (b4b9c <inet_inet_ntop+0xc>)
   b4b94:	681b      	ldr	r3, [r3, #0]
   b4b96:	695b      	ldr	r3, [r3, #20]
   b4b98:	9301      	str	r3, [sp, #4]
   b4b9a:	bd08      	pop	{r3, pc}
   b4b9c:	00030264 	.word	0x00030264

000b4ba0 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b4ba0:	b508      	push	{r3, lr}
   b4ba2:	4b02      	ldr	r3, [pc, #8]	; (b4bac <inet_htonl+0xc>)
   b4ba4:	681b      	ldr	r3, [r3, #0]
   b4ba6:	6a1b      	ldr	r3, [r3, #32]
   b4ba8:	9301      	str	r3, [sp, #4]
   b4baa:	bd08      	pop	{r3, pc}
   b4bac:	00030264 	.word	0x00030264

000b4bb0 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b4bb0:	b508      	push	{r3, lr}
   b4bb2:	4b02      	ldr	r3, [pc, #8]	; (b4bbc <inet_htons+0xc>)
   b4bb4:	681b      	ldr	r3, [r3, #0]
   b4bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4bb8:	9301      	str	r3, [sp, #4]
   b4bba:	bd08      	pop	{r3, pc}
   b4bbc:	00030264 	.word	0x00030264

000b4bc0 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b4bc0:	b508      	push	{r3, lr}
   b4bc2:	4b02      	ldr	r3, [pc, #8]	; (b4bcc <netdb_freeaddrinfo+0xc>)
   b4bc4:	681b      	ldr	r3, [r3, #0]
   b4bc6:	689b      	ldr	r3, [r3, #8]
   b4bc8:	9301      	str	r3, [sp, #4]
   b4bca:	bd08      	pop	{r3, pc}
   b4bcc:	00030268 	.word	0x00030268

000b4bd0 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b4bd0:	b508      	push	{r3, lr}
   b4bd2:	4b02      	ldr	r3, [pc, #8]	; (b4bdc <netdb_getaddrinfo+0xc>)
   b4bd4:	681b      	ldr	r3, [r3, #0]
   b4bd6:	68db      	ldr	r3, [r3, #12]
   b4bd8:	9301      	str	r3, [sp, #4]
   b4bda:	bd08      	pop	{r3, pc}
   b4bdc:	00030268 	.word	0x00030268

000b4be0 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b4be0:	b508      	push	{r3, lr}
   b4be2:	4b02      	ldr	r3, [pc, #8]	; (b4bec <sock_setsockopt+0xc>)
   b4be4:	681b      	ldr	r3, [r3, #0]
   b4be6:	699b      	ldr	r3, [r3, #24]
   b4be8:	9301      	str	r3, [sp, #4]
   b4bea:	bd08      	pop	{r3, pc}
   b4bec:	00030238 	.word	0x00030238

000b4bf0 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b4bf0:	b508      	push	{r3, lr}
   b4bf2:	4b02      	ldr	r3, [pc, #8]	; (b4bfc <sock_close+0xc>)
   b4bf4:	681b      	ldr	r3, [r3, #0]
   b4bf6:	69db      	ldr	r3, [r3, #28]
   b4bf8:	9301      	str	r3, [sp, #4]
   b4bfa:	bd08      	pop	{r3, pc}
   b4bfc:	00030238 	.word	0x00030238

000b4c00 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b4c00:	b508      	push	{r3, lr}
   b4c02:	4b02      	ldr	r3, [pc, #8]	; (b4c0c <sock_connect+0xc>)
   b4c04:	681b      	ldr	r3, [r3, #0]
   b4c06:	6a1b      	ldr	r3, [r3, #32]
   b4c08:	9301      	str	r3, [sp, #4]
   b4c0a:	bd08      	pop	{r3, pc}
   b4c0c:	00030238 	.word	0x00030238

000b4c10 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b4c10:	b508      	push	{r3, lr}
   b4c12:	4b02      	ldr	r3, [pc, #8]	; (b4c1c <sock_recv+0xc>)
   b4c14:	681b      	ldr	r3, [r3, #0]
   b4c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4c18:	9301      	str	r3, [sp, #4]
   b4c1a:	bd08      	pop	{r3, pc}
   b4c1c:	00030238 	.word	0x00030238

000b4c20 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b4c20:	b508      	push	{r3, lr}
   b4c22:	4b02      	ldr	r3, [pc, #8]	; (b4c2c <sock_send+0xc>)
   b4c24:	681b      	ldr	r3, [r3, #0]
   b4c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4c28:	9301      	str	r3, [sp, #4]
   b4c2a:	bd08      	pop	{r3, pc}
   b4c2c:	00030238 	.word	0x00030238

000b4c30 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b4c30:	b508      	push	{r3, lr}
   b4c32:	4b02      	ldr	r3, [pc, #8]	; (b4c3c <sock_socket+0xc>)
   b4c34:	681b      	ldr	r3, [r3, #0]
   b4c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b4c38:	9301      	str	r3, [sp, #4]
   b4c3a:	bd08      	pop	{r3, pc}
   b4c3c:	00030238 	.word	0x00030238

000b4c40 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b4c40:	b508      	push	{r3, lr}
   b4c42:	4b02      	ldr	r3, [pc, #8]	; (b4c4c <hal_usart_write+0xc>)
   b4c44:	681b      	ldr	r3, [r3, #0]
   b4c46:	68db      	ldr	r3, [r3, #12]
   b4c48:	9301      	str	r3, [sp, #4]
   b4c4a:	bd08      	pop	{r3, pc}
   b4c4c:	0003023c 	.word	0x0003023c

000b4c50 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b4c50:	b508      	push	{r3, lr}
   b4c52:	4b02      	ldr	r3, [pc, #8]	; (b4c5c <hal_usart_available+0xc>)
   b4c54:	681b      	ldr	r3, [r3, #0]
   b4c56:	691b      	ldr	r3, [r3, #16]
   b4c58:	9301      	str	r3, [sp, #4]
   b4c5a:	bd08      	pop	{r3, pc}
   b4c5c:	0003023c 	.word	0x0003023c

000b4c60 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b4c60:	b508      	push	{r3, lr}
   b4c62:	4b02      	ldr	r3, [pc, #8]	; (b4c6c <hal_usart_read+0xc>)
   b4c64:	681b      	ldr	r3, [r3, #0]
   b4c66:	695b      	ldr	r3, [r3, #20]
   b4c68:	9301      	str	r3, [sp, #4]
   b4c6a:	bd08      	pop	{r3, pc}
   b4c6c:	0003023c 	.word	0x0003023c

000b4c70 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b4c70:	b508      	push	{r3, lr}
   b4c72:	4b02      	ldr	r3, [pc, #8]	; (b4c7c <hal_usart_peek+0xc>)
   b4c74:	681b      	ldr	r3, [r3, #0]
   b4c76:	699b      	ldr	r3, [r3, #24]
   b4c78:	9301      	str	r3, [sp, #4]
   b4c7a:	bd08      	pop	{r3, pc}
   b4c7c:	0003023c 	.word	0x0003023c

000b4c80 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b4c80:	b508      	push	{r3, lr}
   b4c82:	4b02      	ldr	r3, [pc, #8]	; (b4c8c <hal_usart_flush+0xc>)
   b4c84:	681b      	ldr	r3, [r3, #0]
   b4c86:	69db      	ldr	r3, [r3, #28]
   b4c88:	9301      	str	r3, [sp, #4]
   b4c8a:	bd08      	pop	{r3, pc}
   b4c8c:	0003023c 	.word	0x0003023c

000b4c90 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b4c90:	b508      	push	{r3, lr}
   b4c92:	4b02      	ldr	r3, [pc, #8]	; (b4c9c <hal_usart_available_data_for_write+0xc>)
   b4c94:	681b      	ldr	r3, [r3, #0]
   b4c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4c98:	9301      	str	r3, [sp, #4]
   b4c9a:	bd08      	pop	{r3, pc}
   b4c9c:	0003023c 	.word	0x0003023c

000b4ca0 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b4ca0:	b508      	push	{r3, lr}
   b4ca2:	4b02      	ldr	r3, [pc, #8]	; (b4cac <hal_usart_init_ex+0xc>)
   b4ca4:	681b      	ldr	r3, [r3, #0]
   b4ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4ca8:	9301      	str	r3, [sp, #4]
   b4caa:	bd08      	pop	{r3, pc}
   b4cac:	0003023c 	.word	0x0003023c

000b4cb0 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b4cb0:	b508      	push	{r3, lr}
   b4cb2:	4b02      	ldr	r3, [pc, #8]	; (b4cbc <HAL_USB_USART_Init+0xc>)
   b4cb4:	681b      	ldr	r3, [r3, #0]
   b4cb6:	681b      	ldr	r3, [r3, #0]
   b4cb8:	9301      	str	r3, [sp, #4]
   b4cba:	bd08      	pop	{r3, pc}
   b4cbc:	0003024c 	.word	0x0003024c

000b4cc0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b4cc0:	b508      	push	{r3, lr}
   b4cc2:	4b02      	ldr	r3, [pc, #8]	; (b4ccc <HAL_USB_USART_Available_Data+0xc>)
   b4cc4:	681b      	ldr	r3, [r3, #0]
   b4cc6:	691b      	ldr	r3, [r3, #16]
   b4cc8:	9301      	str	r3, [sp, #4]
   b4cca:	bd08      	pop	{r3, pc}
   b4ccc:	0003024c 	.word	0x0003024c

000b4cd0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b4cd0:	b508      	push	{r3, lr}
   b4cd2:	4b02      	ldr	r3, [pc, #8]	; (b4cdc <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b4cd4:	681b      	ldr	r3, [r3, #0]
   b4cd6:	695b      	ldr	r3, [r3, #20]
   b4cd8:	9301      	str	r3, [sp, #4]
   b4cda:	bd08      	pop	{r3, pc}
   b4cdc:	0003024c 	.word	0x0003024c

000b4ce0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4ce0:	b508      	push	{r3, lr}
   b4ce2:	4b02      	ldr	r3, [pc, #8]	; (b4cec <HAL_USB_USART_Receive_Data+0xc>)
   b4ce4:	681b      	ldr	r3, [r3, #0]
   b4ce6:	699b      	ldr	r3, [r3, #24]
   b4ce8:	9301      	str	r3, [sp, #4]
   b4cea:	bd08      	pop	{r3, pc}
   b4cec:	0003024c 	.word	0x0003024c

000b4cf0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4cf0:	b508      	push	{r3, lr}
   b4cf2:	4b02      	ldr	r3, [pc, #8]	; (b4cfc <HAL_USB_USART_Send_Data+0xc>)
   b4cf4:	681b      	ldr	r3, [r3, #0]
   b4cf6:	69db      	ldr	r3, [r3, #28]
   b4cf8:	9301      	str	r3, [sp, #4]
   b4cfa:	bd08      	pop	{r3, pc}
   b4cfc:	0003024c 	.word	0x0003024c

000b4d00 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b4d00:	b508      	push	{r3, lr}
   b4d02:	4b02      	ldr	r3, [pc, #8]	; (b4d0c <HAL_USB_USART_Flush_Data+0xc>)
   b4d04:	681b      	ldr	r3, [r3, #0]
   b4d06:	6a1b      	ldr	r3, [r3, #32]
   b4d08:	9301      	str	r3, [sp, #4]
   b4d0a:	bd08      	pop	{r3, pc}
   b4d0c:	0003024c 	.word	0x0003024c

000b4d10 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b4d10:	b508      	push	{r3, lr}
   b4d12:	4b02      	ldr	r3, [pc, #8]	; (b4d1c <log_message+0xc>)
   b4d14:	681b      	ldr	r3, [r3, #0]
   b4d16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b4d18:	9301      	str	r3, [sp, #4]
   b4d1a:	bd08      	pop	{r3, pc}
   b4d1c:	00030260 	.word	0x00030260

000b4d20 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b4d20:	b508      	push	{r3, lr}
   b4d22:	4b02      	ldr	r3, [pc, #8]	; (b4d2c <set_system_mode+0xc>)
   b4d24:	681b      	ldr	r3, [r3, #0]
   b4d26:	685b      	ldr	r3, [r3, #4]
   b4d28:	9301      	str	r3, [sp, #4]
   b4d2a:	bd08      	pop	{r3, pc}
   b4d2c:	00030220 	.word	0x00030220

000b4d30 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b4d30:	b508      	push	{r3, lr}
   b4d32:	4b02      	ldr	r3, [pc, #8]	; (b4d3c <system_delay_ms+0xc>)
   b4d34:	681b      	ldr	r3, [r3, #0]
   b4d36:	695b      	ldr	r3, [r3, #20]
   b4d38:	9301      	str	r3, [sp, #4]
   b4d3a:	bd08      	pop	{r3, pc}
   b4d3c:	00030220 	.word	0x00030220

000b4d40 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b4d40:	b508      	push	{r3, lr}
   b4d42:	4b02      	ldr	r3, [pc, #8]	; (b4d4c <system_thread_set_state+0xc>)
   b4d44:	681b      	ldr	r3, [r3, #0]
   b4d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4d48:	9301      	str	r3, [sp, #4]
   b4d4a:	bd08      	pop	{r3, pc}
   b4d4c:	00030220 	.word	0x00030220

000b4d50 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b4d50:	b508      	push	{r3, lr}
   b4d52:	4b03      	ldr	r3, [pc, #12]	; (b4d60 <system_ctrl_set_app_request_handler+0x10>)
   b4d54:	681b      	ldr	r3, [r3, #0]
   b4d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b4d5a:	9301      	str	r3, [sp, #4]
   b4d5c:	bd08      	pop	{r3, pc}
   b4d5e:	0000      	.short	0x0000
   b4d60:	00030220 	.word	0x00030220

000b4d64 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b4d64:	b508      	push	{r3, lr}
   b4d66:	4b03      	ldr	r3, [pc, #12]	; (b4d74 <system_ctrl_set_result+0x10>)
   b4d68:	681b      	ldr	r3, [r3, #0]
   b4d6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b4d6e:	9301      	str	r3, [sp, #4]
   b4d70:	bd08      	pop	{r3, pc}
   b4d72:	0000      	.short	0x0000
   b4d74:	00030220 	.word	0x00030220

000b4d78 <spark_deviceID>:
DYNALIB_FN(2, system_cloud, spark_process, bool(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   b4d78:	b508      	push	{r3, lr}
   b4d7a:	4b02      	ldr	r3, [pc, #8]	; (b4d84 <spark_deviceID+0xc>)
   b4d7c:	681b      	ldr	r3, [r3, #0]
   b4d7e:	69db      	ldr	r3, [r3, #28]
   b4d80:	9301      	str	r3, [sp, #4]
   b4d82:	bd08      	pop	{r3, pc}
   b4d84:	00030244 	.word	0x00030244

000b4d88 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b4d88:	b508      	push	{r3, lr}
   b4d8a:	4b02      	ldr	r3, [pc, #8]	; (b4d94 <spark_set_random_seed_from_cloud_handler+0xc>)
   b4d8c:	681b      	ldr	r3, [r3, #0]
   b4d8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b4d90:	9301      	str	r3, [sp, #4]
   b4d92:	bd08      	pop	{r3, pc}
   b4d94:	00030244 	.word	0x00030244

000b4d98 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b4d98:	b508      	push	{r3, lr}
   b4d9a:	4b02      	ldr	r3, [pc, #8]	; (b4da4 <network_connect+0xc>)
   b4d9c:	681b      	ldr	r3, [r3, #0]
   b4d9e:	685b      	ldr	r3, [r3, #4]
   b4da0:	9301      	str	r3, [sp, #4]
   b4da2:	bd08      	pop	{r3, pc}
   b4da4:	00030240 	.word	0x00030240

000b4da8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b4da8:	b508      	push	{r3, lr}
   b4daa:	4b02      	ldr	r3, [pc, #8]	; (b4db4 <network_connecting+0xc>)
   b4dac:	681b      	ldr	r3, [r3, #0]
   b4dae:	689b      	ldr	r3, [r3, #8]
   b4db0:	9301      	str	r3, [sp, #4]
   b4db2:	bd08      	pop	{r3, pc}
   b4db4:	00030240 	.word	0x00030240

000b4db8 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b4db8:	b508      	push	{r3, lr}
   b4dba:	4b02      	ldr	r3, [pc, #8]	; (b4dc4 <network_disconnect+0xc>)
   b4dbc:	681b      	ldr	r3, [r3, #0]
   b4dbe:	68db      	ldr	r3, [r3, #12]
   b4dc0:	9301      	str	r3, [sp, #4]
   b4dc2:	bd08      	pop	{r3, pc}
   b4dc4:	00030240 	.word	0x00030240

000b4dc8 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b4dc8:	b508      	push	{r3, lr}
   b4dca:	4b02      	ldr	r3, [pc, #8]	; (b4dd4 <network_ready+0xc>)
   b4dcc:	681b      	ldr	r3, [r3, #0]
   b4dce:	691b      	ldr	r3, [r3, #16]
   b4dd0:	9301      	str	r3, [sp, #4]
   b4dd2:	bd08      	pop	{r3, pc}
   b4dd4:	00030240 	.word	0x00030240

000b4dd8 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b4dd8:	b508      	push	{r3, lr}
   b4dda:	4b02      	ldr	r3, [pc, #8]	; (b4de4 <network_on+0xc>)
   b4ddc:	681b      	ldr	r3, [r3, #0]
   b4dde:	695b      	ldr	r3, [r3, #20]
   b4de0:	9301      	str	r3, [sp, #4]
   b4de2:	bd08      	pop	{r3, pc}
   b4de4:	00030240 	.word	0x00030240

000b4de8 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b4de8:	b508      	push	{r3, lr}
   b4dea:	4b02      	ldr	r3, [pc, #8]	; (b4df4 <network_off+0xc>)
   b4dec:	681b      	ldr	r3, [r3, #0]
   b4dee:	699b      	ldr	r3, [r3, #24]
   b4df0:	9301      	str	r3, [sp, #4]
   b4df2:	bd08      	pop	{r3, pc}
   b4df4:	00030240 	.word	0x00030240

000b4df8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b4df8:	b508      	push	{r3, lr}
   b4dfa:	4b02      	ldr	r3, [pc, #8]	; (b4e04 <network_listen+0xc>)
   b4dfc:	681b      	ldr	r3, [r3, #0]
   b4dfe:	69db      	ldr	r3, [r3, #28]
   b4e00:	9301      	str	r3, [sp, #4]
   b4e02:	bd08      	pop	{r3, pc}
   b4e04:	00030240 	.word	0x00030240

000b4e08 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b4e08:	b508      	push	{r3, lr}
   b4e0a:	4b02      	ldr	r3, [pc, #8]	; (b4e14 <network_listening+0xc>)
   b4e0c:	681b      	ldr	r3, [r3, #0]
   b4e0e:	6a1b      	ldr	r3, [r3, #32]
   b4e10:	9301      	str	r3, [sp, #4]
   b4e12:	bd08      	pop	{r3, pc}
   b4e14:	00030240 	.word	0x00030240

000b4e18 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b4e18:	b508      	push	{r3, lr}
   b4e1a:	4b02      	ldr	r3, [pc, #8]	; (b4e24 <network_set_listen_timeout+0xc>)
   b4e1c:	681b      	ldr	r3, [r3, #0]
   b4e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4e20:	9301      	str	r3, [sp, #4]
   b4e22:	bd08      	pop	{r3, pc}
   b4e24:	00030240 	.word	0x00030240

000b4e28 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b4e28:	b508      	push	{r3, lr}
   b4e2a:	4b02      	ldr	r3, [pc, #8]	; (b4e34 <network_get_listen_timeout+0xc>)
   b4e2c:	681b      	ldr	r3, [r3, #0]
   b4e2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4e30:	9301      	str	r3, [sp, #4]
   b4e32:	bd08      	pop	{r3, pc}
   b4e34:	00030240 	.word	0x00030240

000b4e38 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b4e38:	b508      	push	{r3, lr}
   b4e3a:	4b02      	ldr	r3, [pc, #8]	; (b4e44 <network_is_on+0xc>)
   b4e3c:	681b      	ldr	r3, [r3, #0]
   b4e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4e40:	9301      	str	r3, [sp, #4]
   b4e42:	bd08      	pop	{r3, pc}
   b4e44:	00030240 	.word	0x00030240

000b4e48 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b4e48:	b508      	push	{r3, lr}
   b4e4a:	4b02      	ldr	r3, [pc, #8]	; (b4e54 <network_is_off+0xc>)
   b4e4c:	681b      	ldr	r3, [r3, #0]
   b4e4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4e50:	9301      	str	r3, [sp, #4]
   b4e52:	bd08      	pop	{r3, pc}
   b4e54:	00030240 	.word	0x00030240

000b4e58 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b4e58:	b508      	push	{r3, lr}
   b4e5a:	4b02      	ldr	r3, [pc, #8]	; (b4e64 <malloc+0xc>)
   b4e5c:	681b      	ldr	r3, [r3, #0]
   b4e5e:	681b      	ldr	r3, [r3, #0]
   b4e60:	9301      	str	r3, [sp, #4]
   b4e62:	bd08      	pop	{r3, pc}
   b4e64:	0003021c 	.word	0x0003021c

000b4e68 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b4e68:	b508      	push	{r3, lr}
   b4e6a:	4b02      	ldr	r3, [pc, #8]	; (b4e74 <free+0xc>)
   b4e6c:	681b      	ldr	r3, [r3, #0]
   b4e6e:	685b      	ldr	r3, [r3, #4]
   b4e70:	9301      	str	r3, [sp, #4]
   b4e72:	bd08      	pop	{r3, pc}
   b4e74:	0003021c 	.word	0x0003021c

000b4e78 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b4e78:	b508      	push	{r3, lr}
   b4e7a:	4b02      	ldr	r3, [pc, #8]	; (b4e84 <realloc+0xc>)
   b4e7c:	681b      	ldr	r3, [r3, #0]
   b4e7e:	689b      	ldr	r3, [r3, #8]
   b4e80:	9301      	str	r3, [sp, #4]
   b4e82:	bd08      	pop	{r3, pc}
   b4e84:	0003021c 	.word	0x0003021c

000b4e88 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b4e88:	b508      	push	{r3, lr}
   b4e8a:	4b02      	ldr	r3, [pc, #8]	; (b4e94 <__errno+0xc>)
   b4e8c:	681b      	ldr	r3, [r3, #0]
   b4e8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b4e90:	9301      	str	r3, [sp, #4]
   b4e92:	bd08      	pop	{r3, pc}
   b4e94:	0003021c 	.word	0x0003021c

000b4e98 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b4e98:	b508      	push	{r3, lr}
   b4e9a:	4b02      	ldr	r3, [pc, #8]	; (b4ea4 <__assert_func+0xc>)
   b4e9c:	681b      	ldr	r3, [r3, #0]
   b4e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4ea0:	9301      	str	r3, [sp, #4]
   b4ea2:	bd08      	pop	{r3, pc}
   b4ea4:	0003021c 	.word	0x0003021c

000b4ea8 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b4ea8:	b508      	push	{r3, lr}
   b4eaa:	4b02      	ldr	r3, [pc, #8]	; (b4eb4 <newlib_impure_ptr_callback+0xc>)
   b4eac:	681b      	ldr	r3, [r3, #0]
   b4eae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4eb0:	9301      	str	r3, [sp, #4]
   b4eb2:	bd08      	pop	{r3, pc}
   b4eb4:	0003021c 	.word	0x0003021c

000b4eb8 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b4eb8:	2100      	movs	r1, #0
   b4eba:	f7ff bf39 	b.w	b4d30 <system_delay_ms>
	...

000b4ec0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b4ec0:	4802      	ldr	r0, [pc, #8]	; (b4ecc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b4ec2:	2300      	movs	r3, #0
   b4ec4:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b4ec6:	f7ff be43 	b.w	b4b50 <os_mutex_recursive_create>
   b4eca:	bf00      	nop
   b4ecc:	2003e6dc 	.word	0x2003e6dc

000b4ed0 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b4ed0:	2200      	movs	r2, #0
   b4ed2:	6840      	ldr	r0, [r0, #4]
   b4ed4:	4611      	mov	r1, r2
   b4ed6:	f7ff bf97 	b.w	b4e08 <network_listening>

000b4eda <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b4eda:	2200      	movs	r2, #0
   b4edc:	6840      	ldr	r0, [r0, #4]
   b4ede:	4611      	mov	r1, r2
   b4ee0:	f7ff bfa2 	b.w	b4e28 <network_get_listen_timeout>

000b4ee4 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b4ee4:	6840      	ldr	r0, [r0, #4]
   b4ee6:	2200      	movs	r2, #0
   b4ee8:	f7ff bf96 	b.w	b4e18 <network_set_listen_timeout>

000b4eec <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b4eec:	6840      	ldr	r0, [r0, #4]
   b4eee:	2200      	movs	r2, #0
   b4ef0:	f081 0101 	eor.w	r1, r1, #1
   b4ef4:	f7ff bf80 	b.w	b4df8 <network_listen>

000b4ef8 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b4ef8:	2300      	movs	r3, #0
   b4efa:	6840      	ldr	r0, [r0, #4]
   b4efc:	461a      	mov	r2, r3
   b4efe:	4619      	mov	r1, r3
   b4f00:	f7ff bf72 	b.w	b4de8 <network_off>

000b4f04 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b4f04:	2300      	movs	r3, #0
   b4f06:	6840      	ldr	r0, [r0, #4]
   b4f08:	461a      	mov	r2, r3
   b4f0a:	4619      	mov	r1, r3
   b4f0c:	f7ff bf64 	b.w	b4dd8 <network_on>

000b4f10 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b4f10:	2200      	movs	r2, #0
   b4f12:	6840      	ldr	r0, [r0, #4]
   b4f14:	4611      	mov	r1, r2
   b4f16:	f7ff bf57 	b.w	b4dc8 <network_ready>

000b4f1a <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b4f1a:	2200      	movs	r2, #0
   b4f1c:	6840      	ldr	r0, [r0, #4]
   b4f1e:	4611      	mov	r1, r2
   b4f20:	f7ff bf42 	b.w	b4da8 <network_connecting>

000b4f24 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b4f24:	6840      	ldr	r0, [r0, #4]
   b4f26:	2200      	movs	r2, #0
   b4f28:	2102      	movs	r1, #2
   b4f2a:	f7ff bf45 	b.w	b4db8 <network_disconnect>

000b4f2e <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b4f2e:	2300      	movs	r3, #0
   b4f30:	6840      	ldr	r0, [r0, #4]
   b4f32:	461a      	mov	r2, r3
   b4f34:	f7ff bf30 	b.w	b4d98 <network_connect>

000b4f38 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b4f38:	4b02      	ldr	r3, [pc, #8]	; (b4f44 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b4f3a:	2203      	movs	r2, #3
   b4f3c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b4f3e:	4a02      	ldr	r2, [pc, #8]	; (b4f48 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b4f40:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b4f42:	4770      	bx	lr
   b4f44:	2003e6e0 	.word	0x2003e6e0
   b4f48:	000b62e0 	.word	0x000b62e0

000b4f4c <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b4f4c:	4770      	bx	lr

000b4f4e <_ZN9IPAddressD0Ev>:
   b4f4e:	b510      	push	{r4, lr}
   b4f50:	2118      	movs	r1, #24
   b4f52:	4604      	mov	r4, r0
   b4f54:	f7ff f8b5 	bl	b40c2 <_ZdlPvj>
   b4f58:	4620      	mov	r0, r4
   b4f5a:	bd10      	pop	{r4, pc}

000b4f5c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b4f5c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b4f5e:	7d03      	ldrb	r3, [r0, #20]
   b4f60:	2b06      	cmp	r3, #6
{
   b4f62:	b08d      	sub	sp, #52	; 0x34
   b4f64:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4f66:	f100 0704 	add.w	r7, r0, #4
   b4f6a:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b4f6e:	d012      	beq.n	b4f96 <_ZNK9IPAddress7printToER5Print+0x3a>
   b4f70:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b4f74:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b4f78:	220a      	movs	r2, #10
   b4f7a:	4630      	mov	r0, r6
   b4f7c:	f000 f959 	bl	b5232 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b4f80:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b4f82:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b4f84:	d019      	beq.n	b4fba <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b4f86:	2c00      	cmp	r4, #0
   b4f88:	d0f4      	beq.n	b4f74 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b4f8a:	212e      	movs	r1, #46	; 0x2e
   b4f8c:	4630      	mov	r0, r6
   b4f8e:	f000 f94d 	bl	b522c <_ZN5Print5printEc>
   b4f92:	4404      	add	r4, r0
   b4f94:	e7ee      	b.n	b4f74 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4f96:	232f      	movs	r3, #47	; 0x2f
   b4f98:	466a      	mov	r2, sp
   b4f9a:	4639      	mov	r1, r7
   b4f9c:	200a      	movs	r0, #10
		buf[0] = 0;
   b4f9e:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4fa2:	f7ff fdf5 	bl	b4b90 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b4fa6:	4668      	mov	r0, sp
   b4fa8:	f7ff f842 	bl	b4030 <strlen>
   b4fac:	6833      	ldr	r3, [r6, #0]
   b4fae:	4602      	mov	r2, r0
   b4fb0:	68db      	ldr	r3, [r3, #12]
   b4fb2:	4669      	mov	r1, sp
   b4fb4:	4630      	mov	r0, r6
   b4fb6:	4798      	blx	r3
   b4fb8:	4604      	mov	r4, r0
    }
    return n;
}
   b4fba:	4620      	mov	r0, r4
   b4fbc:	b00d      	add	sp, #52	; 0x34
   b4fbe:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b4fc0 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b4fc0:	b510      	push	{r4, lr}
   b4fc2:	4b05      	ldr	r3, [pc, #20]	; (b4fd8 <_ZN9IPAddressC1Ev+0x18>)
   b4fc4:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b4fc6:	2211      	movs	r2, #17
   b4fc8:	f840 3b04 	str.w	r3, [r0], #4
   b4fcc:	2100      	movs	r1, #0
   b4fce:	f001 f895 	bl	b60fc <memset>
}
   b4fd2:	4620      	mov	r0, r4
   b4fd4:	bd10      	pop	{r4, pc}
   b4fd6:	bf00      	nop
   b4fd8:	000b631c 	.word	0x000b631c

000b4fdc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b4fdc:	4603      	mov	r3, r0
   b4fde:	4a07      	ldr	r2, [pc, #28]	; (b4ffc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b4fe0:	b510      	push	{r4, lr}
   b4fe2:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b4fe6:	f101 0210 	add.w	r2, r1, #16
   b4fea:	f851 4b04 	ldr.w	r4, [r1], #4
   b4fee:	f843 4b04 	str.w	r4, [r3], #4
   b4ff2:	4291      	cmp	r1, r2
   b4ff4:	d1f9      	bne.n	b4fea <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b4ff6:	780a      	ldrb	r2, [r1, #0]
   b4ff8:	701a      	strb	r2, [r3, #0]
}
   b4ffa:	bd10      	pop	{r4, pc}
   b4ffc:	000b631c 	.word	0x000b631c

000b5000 <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b5000:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b5002:	2b04      	cmp	r3, #4
   b5004:	d104      	bne.n	b5010 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b5006:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b5008:	3800      	subs	r0, #0
   b500a:	bf18      	it	ne
   b500c:	2001      	movne	r0, #1
   b500e:	4770      	bx	lr
    } else if (version() == 6) {
   b5010:	2b06      	cmp	r3, #6
   b5012:	d107      	bne.n	b5024 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b5014:	6843      	ldr	r3, [r0, #4]
   b5016:	b93b      	cbnz	r3, b5028 <_ZNK9IPAddresscvbEv+0x28>
   b5018:	6883      	ldr	r3, [r0, #8]
   b501a:	b92b      	cbnz	r3, b5028 <_ZNK9IPAddresscvbEv+0x28>
   b501c:	68c3      	ldr	r3, [r0, #12]
   b501e:	b91b      	cbnz	r3, b5028 <_ZNK9IPAddresscvbEv+0x28>
   b5020:	6900      	ldr	r0, [r0, #16]
   b5022:	e7f1      	b.n	b5008 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b5024:	2000      	movs	r0, #0
   b5026:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b5028:	2001      	movs	r0, #1
}
   b502a:	4770      	bx	lr

000b502c <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b502c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b502e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b5032:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b5036:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b503a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b503e:	2304      	movs	r3, #4
   b5040:	6041      	str	r1, [r0, #4]
   b5042:	7503      	strb	r3, [r0, #20]
}
   b5044:	bd10      	pop	{r4, pc}
	...

000b5048 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b5048:	b507      	push	{r0, r1, r2, lr}
   b504a:	4b06      	ldr	r3, [pc, #24]	; (b5064 <_ZN9IPAddressC1EPKh+0x1c>)
   b504c:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b504e:	78cb      	ldrb	r3, [r1, #3]
   b5050:	9300      	str	r3, [sp, #0]
   b5052:	788b      	ldrb	r3, [r1, #2]
   b5054:	784a      	ldrb	r2, [r1, #1]
   b5056:	7809      	ldrb	r1, [r1, #0]
   b5058:	f7ff ffe8 	bl	b502c <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b505c:	b003      	add	sp, #12
   b505e:	f85d fb04 	ldr.w	pc, [sp], #4
   b5062:	bf00      	nop
   b5064:	000b631c 	.word	0x000b631c

000b5068 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b5068:	4b01      	ldr	r3, [pc, #4]	; (b5070 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b506a:	4a02      	ldr	r2, [pc, #8]	; (b5074 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b506c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b506e:	4770      	bx	lr
   b5070:	2003e6e8 	.word	0x2003e6e8
   b5074:	000b6328 	.word	0x000b6328

000b5078 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b5078:	2300      	movs	r3, #0
   b507a:	6840      	ldr	r0, [r0, #4]
   b507c:	461a      	mov	r2, r3
   b507e:	f7ff be8b 	b.w	b4d98 <network_connect>

000b5082 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b5082:	6840      	ldr	r0, [r0, #4]
   b5084:	2200      	movs	r2, #0
   b5086:	2102      	movs	r1, #2
   b5088:	f7ff be96 	b.w	b4db8 <network_disconnect>

000b508c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b508c:	2200      	movs	r2, #0
   b508e:	6840      	ldr	r0, [r0, #4]
   b5090:	4611      	mov	r1, r2
   b5092:	f7ff be89 	b.w	b4da8 <network_connecting>

000b5096 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b5096:	2200      	movs	r2, #0
   b5098:	6840      	ldr	r0, [r0, #4]
   b509a:	4611      	mov	r1, r2
   b509c:	f7ff be94 	b.w	b4dc8 <network_ready>

000b50a0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b50a0:	2300      	movs	r3, #0
   b50a2:	6840      	ldr	r0, [r0, #4]
   b50a4:	461a      	mov	r2, r3
   b50a6:	4619      	mov	r1, r3
   b50a8:	f7ff be96 	b.w	b4dd8 <network_on>

000b50ac <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b50ac:	2300      	movs	r3, #0
   b50ae:	6840      	ldr	r0, [r0, #4]
   b50b0:	461a      	mov	r2, r3
   b50b2:	4619      	mov	r1, r3
   b50b4:	f7ff be98 	b.w	b4de8 <network_off>

000b50b8 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b50b8:	6840      	ldr	r0, [r0, #4]
   b50ba:	2100      	movs	r1, #0
   b50bc:	f7ff bebc 	b.w	b4e38 <network_is_on>

000b50c0 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b50c0:	6840      	ldr	r0, [r0, #4]
   b50c2:	2100      	movs	r1, #0
   b50c4:	f7ff bec0 	b.w	b4e48 <network_is_off>

000b50c8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b50c8:	6840      	ldr	r0, [r0, #4]
   b50ca:	2200      	movs	r2, #0
   b50cc:	f081 0101 	eor.w	r1, r1, #1
   b50d0:	f7ff be92 	b.w	b4df8 <network_listen>

000b50d4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b50d4:	6840      	ldr	r0, [r0, #4]
   b50d6:	2200      	movs	r2, #0
   b50d8:	f7ff be9e 	b.w	b4e18 <network_set_listen_timeout>

000b50dc <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b50dc:	2200      	movs	r2, #0
   b50de:	6840      	ldr	r0, [r0, #4]
   b50e0:	4611      	mov	r1, r2
   b50e2:	f7ff bea1 	b.w	b4e28 <network_get_listen_timeout>

000b50e6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b50e6:	2200      	movs	r2, #0
   b50e8:	6840      	ldr	r0, [r0, #4]
   b50ea:	4611      	mov	r1, r2
   b50ec:	f7ff be8c 	b.w	b4e08 <network_listening>

000b50f0 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b50f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b50f4:	b095      	sub	sp, #84	; 0x54
   b50f6:	4614      	mov	r4, r2
   b50f8:	460d      	mov	r5, r1
   b50fa:	4607      	mov	r7, r0
    IPAddress addr;
   b50fc:	f7ff ff60 	bl	b4fc0 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b5100:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b5102:	221c      	movs	r2, #28
   b5104:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b5106:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b5108:	f000 fff8 	bl	b60fc <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b510c:	2340      	movs	r3, #64	; 0x40
   b510e:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b5110:	4620      	mov	r0, r4
   b5112:	466b      	mov	r3, sp
   b5114:	aa0c      	add	r2, sp, #48	; 0x30
   b5116:	2100      	movs	r1, #0
   b5118:	f7ff fd5a 	bl	b4bd0 <netdb_getaddrinfo>
    if (!r) {
   b511c:	4604      	mov	r4, r0
   b511e:	2800      	cmp	r0, #0
   b5120:	d14b      	bne.n	b51ba <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b5122:	4602      	mov	r2, r0
   b5124:	2101      	movs	r1, #1
   b5126:	6868      	ldr	r0, [r5, #4]
   b5128:	f7ff fe4e 	bl	b4dc8 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b512c:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b512e:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5130:	4622      	mov	r2, r4
   b5132:	6868      	ldr	r0, [r5, #4]
   b5134:	f7ff fe48 	bl	b4dc8 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5138:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b513a:	4681      	mov	r9, r0
        bool ok = false;
   b513c:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b513e:	2e00      	cmp	r6, #0
   b5140:	d03b      	beq.n	b51ba <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b5142:	2900      	cmp	r1, #0
   b5144:	d139      	bne.n	b51ba <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b5146:	6873      	ldr	r3, [r6, #4]
   b5148:	2b02      	cmp	r3, #2
   b514a:	d003      	beq.n	b5154 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b514c:	2b0a      	cmp	r3, #10
   b514e:	d011      	beq.n	b5174 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5150:	69f6      	ldr	r6, [r6, #28]
   b5152:	e7f4      	b.n	b513e <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b5154:	f1b8 0f00 	cmp.w	r8, #0
   b5158:	d0fa      	beq.n	b5150 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b515a:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b515c:	a806      	add	r0, sp, #24
   b515e:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b5160:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b5162:	f7ff ff71 	bl	b5048 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b5166:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5168:	1d3c      	adds	r4, r7, #4
   b516a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b516c:	682b      	ldr	r3, [r5, #0]
   b516e:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b5170:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b5172:	e7ed      	b.n	b5150 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b5174:	f1b9 0f00 	cmp.w	r9, #0
   b5178:	d0ea      	beq.n	b5150 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b517a:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b517c:	2210      	movs	r2, #16
   b517e:	a801      	add	r0, sp, #4
   b5180:	f000 ffbc 	bl	b60fc <memset>
                    a.v = 6;
   b5184:	2306      	movs	r3, #6
   b5186:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b518a:	ad01      	add	r5, sp, #4
   b518c:	f104 0308 	add.w	r3, r4, #8
   b5190:	3418      	adds	r4, #24
   b5192:	6818      	ldr	r0, [r3, #0]
   b5194:	6859      	ldr	r1, [r3, #4]
   b5196:	462a      	mov	r2, r5
   b5198:	c203      	stmia	r2!, {r0, r1}
   b519a:	3308      	adds	r3, #8
   b519c:	42a3      	cmp	r3, r4
   b519e:	4615      	mov	r5, r2
   b51a0:	d1f7      	bne.n	b5192 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b51a2:	a901      	add	r1, sp, #4
   b51a4:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b51a6:	ad07      	add	r5, sp, #28
   b51a8:	f7ff ff18 	bl	b4fdc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b51ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b51ae:	1d3c      	adds	r4, r7, #4
   b51b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b51b2:	682b      	ldr	r3, [r5, #0]
   b51b4:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b51b6:	4649      	mov	r1, r9
   b51b8:	e7ca      	b.n	b5150 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b51ba:	9800      	ldr	r0, [sp, #0]
   b51bc:	f7ff fd00 	bl	b4bc0 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b51c0:	4638      	mov	r0, r7
   b51c2:	b015      	add	sp, #84	; 0x54
   b51c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b51c8 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b51c8:	4b02      	ldr	r3, [pc, #8]	; (b51d4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b51ca:	4a03      	ldr	r2, [pc, #12]	; (b51d8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b51cc:	601a      	str	r2, [r3, #0]
   b51ce:	2200      	movs	r2, #0
   b51d0:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
   b51d2:	4770      	bx	lr
   b51d4:	2003e6ec 	.word	0x2003e6ec
   b51d8:	000b6334 	.word	0x000b6334

000b51dc <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b51dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b51de:	4606      	mov	r6, r0
   b51e0:	460d      	mov	r5, r1
  size_t n = 0;
   b51e2:	188f      	adds	r7, r1, r2
   b51e4:	2400      	movs	r4, #0
  while (size--) {
   b51e6:	42bd      	cmp	r5, r7
   b51e8:	d00c      	beq.n	b5204 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b51ea:	6833      	ldr	r3, [r6, #0]
   b51ec:	f815 1b01 	ldrb.w	r1, [r5], #1
   b51f0:	689b      	ldr	r3, [r3, #8]
   b51f2:	4630      	mov	r0, r6
   b51f4:	4798      	blx	r3
     if (chunk>=0)
   b51f6:	1e03      	subs	r3, r0, #0
   b51f8:	db01      	blt.n	b51fe <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b51fa:	441c      	add	r4, r3
  while (size--) {
   b51fc:	e7f3      	b.n	b51e6 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b51fe:	2c00      	cmp	r4, #0
   b5200:	bf08      	it	eq
   b5202:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b5204:	4620      	mov	r0, r4
   b5206:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5208 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b5208:	b513      	push	{r0, r1, r4, lr}
   b520a:	4604      	mov	r4, r0
    }
   b520c:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b520e:	b159      	cbz	r1, b5228 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b5210:	9101      	str	r1, [sp, #4]
   b5212:	f7fe ff0d 	bl	b4030 <strlen>
   b5216:	6823      	ldr	r3, [r4, #0]
   b5218:	9901      	ldr	r1, [sp, #4]
   b521a:	68db      	ldr	r3, [r3, #12]
   b521c:	4602      	mov	r2, r0
   b521e:	4620      	mov	r0, r4
    }
   b5220:	b002      	add	sp, #8
   b5222:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b5226:	4718      	bx	r3
    }
   b5228:	b002      	add	sp, #8
   b522a:	bd10      	pop	{r4, pc}

000b522c <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b522c:	6803      	ldr	r3, [r0, #0]
   b522e:	689b      	ldr	r3, [r3, #8]
   b5230:	4718      	bx	r3

000b5232 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b5232:	b530      	push	{r4, r5, lr}
   b5234:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b5236:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b5238:	2a01      	cmp	r2, #1
  *str = '\0';
   b523a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b523e:	bf98      	it	ls
   b5240:	220a      	movls	r2, #10
   b5242:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b5244:	460d      	mov	r5, r1
   b5246:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b524a:	fb01 5312 	mls	r3, r1, r2, r5
   b524e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b5252:	2b09      	cmp	r3, #9
   b5254:	bf94      	ite	ls
   b5256:	3330      	addls	r3, #48	; 0x30
   b5258:	3337      	addhi	r3, #55	; 0x37
   b525a:	b2db      	uxtb	r3, r3
  } while(n);
   b525c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b525e:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b5262:	d9ef      	bls.n	b5244 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b5264:	4621      	mov	r1, r4
   b5266:	f7ff ffcf 	bl	b5208 <_ZN5Print5writeEPKc>
}
   b526a:	b00b      	add	sp, #44	; 0x2c
   b526c:	bd30      	pop	{r4, r5, pc}
	...

000b5270 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b5270:	4b01      	ldr	r3, [pc, #4]	; (b5278 <_GLOBAL__sub_I_RGB+0x8>)
   b5272:	2200      	movs	r2, #0
   b5274:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b5276:	4770      	bx	lr
   b5278:	2003e6f4 	.word	0x2003e6f4

000b527c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b527c:	b510      	push	{r4, lr}
   b527e:	4604      	mov	r4, r0
{
	free(buffer);
   b5280:	6800      	ldr	r0, [r0, #0]
   b5282:	f7ff fdf1 	bl	b4e68 <free>
}
   b5286:	4620      	mov	r0, r4
   b5288:	bd10      	pop	{r4, pc}

000b528a <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b528a:	b510      	push	{r4, lr}
   b528c:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b528e:	6800      	ldr	r0, [r0, #0]
   b5290:	b108      	cbz	r0, b5296 <_ZN6String10invalidateEv+0xc>
   b5292:	f7ff fde9 	bl	b4e68 <free>
	buffer = NULL;
   b5296:	2300      	movs	r3, #0
	capacity = len = 0;
   b5298:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b529c:	6023      	str	r3, [r4, #0]
}
   b529e:	bd10      	pop	{r4, pc}

000b52a0 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b52a0:	b538      	push	{r3, r4, r5, lr}
   b52a2:	4604      	mov	r4, r0
   b52a4:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b52a6:	6800      	ldr	r0, [r0, #0]
   b52a8:	3101      	adds	r1, #1
   b52aa:	f7ff fde5 	bl	b4e78 <realloc>
	if (newbuffer) {
   b52ae:	b110      	cbz	r0, b52b6 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b52b0:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b52b4:	2001      	movs	r0, #1
	}
	return 0;
}
   b52b6:	bd38      	pop	{r3, r4, r5, pc}

000b52b8 <_ZN6String7reserveEj>:
{
   b52b8:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b52ba:	6803      	ldr	r3, [r0, #0]
{
   b52bc:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b52be:	b123      	cbz	r3, b52ca <_ZN6String7reserveEj+0x12>
   b52c0:	6843      	ldr	r3, [r0, #4]
   b52c2:	428b      	cmp	r3, r1
   b52c4:	d301      	bcc.n	b52ca <_ZN6String7reserveEj+0x12>
   b52c6:	2001      	movs	r0, #1
}
   b52c8:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b52ca:	4620      	mov	r0, r4
   b52cc:	f7ff ffe8 	bl	b52a0 <_ZN6String12changeBufferEj>
   b52d0:	2800      	cmp	r0, #0
   b52d2:	d0f9      	beq.n	b52c8 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b52d4:	68a3      	ldr	r3, [r4, #8]
   b52d6:	2b00      	cmp	r3, #0
   b52d8:	d1f5      	bne.n	b52c6 <_ZN6String7reserveEj+0xe>
   b52da:	6822      	ldr	r2, [r4, #0]
   b52dc:	7013      	strb	r3, [r2, #0]
   b52de:	e7f2      	b.n	b52c6 <_ZN6String7reserveEj+0xe>

000b52e0 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b52e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b52e2:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b52e4:	4611      	mov	r1, r2
   b52e6:	9201      	str	r2, [sp, #4]
{
   b52e8:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b52ea:	f7ff ffe5 	bl	b52b8 <_ZN6String7reserveEj>
   b52ee:	9a01      	ldr	r2, [sp, #4]
   b52f0:	b928      	cbnz	r0, b52fe <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b52f2:	4620      	mov	r0, r4
   b52f4:	f7ff ffc9 	bl	b528a <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b52f8:	4620      	mov	r0, r4
   b52fa:	b003      	add	sp, #12
   b52fc:	bd30      	pop	{r4, r5, pc}
	len = length;
   b52fe:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b5300:	4629      	mov	r1, r5
   b5302:	6820      	ldr	r0, [r4, #0]
   b5304:	f000 feec 	bl	b60e0 <memcpy>
	buffer[len] = 0;
   b5308:	6822      	ldr	r2, [r4, #0]
   b530a:	68a3      	ldr	r3, [r4, #8]
   b530c:	2100      	movs	r1, #0
   b530e:	54d1      	strb	r1, [r2, r3]
	return *this;
   b5310:	e7f2      	b.n	b52f8 <_ZN6String4copyEPKcj+0x18>

000b5312 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b5312:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b5314:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b5316:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b531a:	4604      	mov	r4, r0
	len = 0;
   b531c:	6083      	str	r3, [r0, #8]
	flags = 0;
   b531e:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b5320:	b141      	cbz	r1, b5334 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b5322:	4608      	mov	r0, r1
   b5324:	9101      	str	r1, [sp, #4]
   b5326:	f7fe fe83 	bl	b4030 <strlen>
   b532a:	9901      	ldr	r1, [sp, #4]
   b532c:	4602      	mov	r2, r0
   b532e:	4620      	mov	r0, r4
   b5330:	f7ff ffd6 	bl	b52e0 <_ZN6String4copyEPKcj>
}
   b5334:	4620      	mov	r0, r4
   b5336:	b002      	add	sp, #8
   b5338:	bd10      	pop	{r4, pc}

000b533a <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b533a:	4288      	cmp	r0, r1
{
   b533c:	b510      	push	{r4, lr}
   b533e:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b5340:	d005      	beq.n	b534e <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b5342:	680b      	ldr	r3, [r1, #0]
   b5344:	b12b      	cbz	r3, b5352 <_ZN6StringaSERKS_+0x18>
   b5346:	688a      	ldr	r2, [r1, #8]
   b5348:	4619      	mov	r1, r3
   b534a:	f7ff ffc9 	bl	b52e0 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b534e:	4620      	mov	r0, r4
   b5350:	bd10      	pop	{r4, pc}
	else invalidate();
   b5352:	f7ff ff9a 	bl	b528a <_ZN6String10invalidateEv>
   b5356:	e7fa      	b.n	b534e <_ZN6StringaSERKS_+0x14>

000b5358 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b5358:	b510      	push	{r4, lr}
	buffer = NULL;
   b535a:	2300      	movs	r3, #0
String::String(const String &value)
   b535c:	4604      	mov	r4, r0
	capacity = 0;
   b535e:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b5362:	6083      	str	r3, [r0, #8]
	flags = 0;
   b5364:	7303      	strb	r3, [r0, #12]
	*this = value;
   b5366:	f7ff ffe8 	bl	b533a <_ZN6StringaSERKS_>
}
   b536a:	4620      	mov	r0, r4
   b536c:	bd10      	pop	{r4, pc}

000b536e <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b536e:	b513      	push	{r0, r1, r4, lr}
   b5370:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b5372:	b159      	cbz	r1, b538c <_ZN6StringaSEPKc+0x1e>
   b5374:	4608      	mov	r0, r1
   b5376:	9101      	str	r1, [sp, #4]
   b5378:	f7fe fe5a 	bl	b4030 <strlen>
   b537c:	9901      	ldr	r1, [sp, #4]
   b537e:	4602      	mov	r2, r0
   b5380:	4620      	mov	r0, r4
   b5382:	f7ff ffad 	bl	b52e0 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b5386:	4620      	mov	r0, r4
   b5388:	b002      	add	sp, #8
   b538a:	bd10      	pop	{r4, pc}
	else invalidate();
   b538c:	f7ff ff7d 	bl	b528a <_ZN6String10invalidateEv>
   b5390:	e7f9      	b.n	b5386 <_ZN6StringaSEPKc+0x18>

000b5392 <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   b5392:	b510      	push	{r4, lr}
   b5394:	4604      	mov	r4, r0
   b5396:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   b5398:	2300      	movs	r3, #0
	capacity = 0;
   b539a:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b539e:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b53a0:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   b53a2:	4608      	mov	r0, r1
	itoa(value, buf, base);
   b53a4:	a901      	add	r1, sp, #4
   b53a6:	f000 fc8f 	bl	b5cc8 <itoa>
	*this = buf;
   b53aa:	a901      	add	r1, sp, #4
   b53ac:	4620      	mov	r0, r4
   b53ae:	f7ff ffde 	bl	b536e <_ZN6StringaSEPKc>
}
   b53b2:	4620      	mov	r0, r4
   b53b4:	b00a      	add	sp, #40	; 0x28
   b53b6:	bd10      	pop	{r4, pc}

000b53b8 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b53b8:	b570      	push	{r4, r5, r6, lr}
   b53ba:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b53bc:	460e      	mov	r6, r1
   b53be:	b909      	cbnz	r1, b53c4 <_ZN6String6concatEPKcj+0xc>
   b53c0:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b53c2:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b53c4:	b16a      	cbz	r2, b53e2 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b53c6:	6884      	ldr	r4, [r0, #8]
   b53c8:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b53ca:	4621      	mov	r1, r4
   b53cc:	f7ff ff74 	bl	b52b8 <_ZN6String7reserveEj>
   b53d0:	2800      	cmp	r0, #0
   b53d2:	d0f5      	beq.n	b53c0 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b53d4:	6828      	ldr	r0, [r5, #0]
   b53d6:	68ab      	ldr	r3, [r5, #8]
   b53d8:	4631      	mov	r1, r6
   b53da:	4418      	add	r0, r3
   b53dc:	f000 fec4 	bl	b6168 <strcpy>
	len = newlen;
   b53e0:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b53e2:	2001      	movs	r0, #1
   b53e4:	e7ed      	b.n	b53c2 <_ZN6String6concatEPKcj+0xa>

000b53e6 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   b53e6:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b53e8:	688a      	ldr	r2, [r1, #8]
   b53ea:	6809      	ldr	r1, [r1, #0]
{
   b53ec:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b53ee:	f7ff ffe3 	bl	b53b8 <_ZN6String6concatEPKcj>
   b53f2:	b910      	cbnz	r0, b53fa <_ZplRK15StringSumHelperRK6String+0x14>
   b53f4:	4620      	mov	r0, r4
   b53f6:	f7ff ff48 	bl	b528a <_ZN6String10invalidateEv>
	return a;
}
   b53fa:	4620      	mov	r0, r4
   b53fc:	bd10      	pop	{r4, pc}

000b53fe <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   b53fe:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   b5400:	6882      	ldr	r2, [r0, #8]
   b5402:	b93a      	cbnz	r2, b5414 <_ZNK6String6equalsEPKc+0x16>
   b5404:	b121      	cbz	r1, b5410 <_ZNK6String6equalsEPKc+0x12>
   b5406:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   b5408:	fab0 f080 	clz	r0, r0
   b540c:	0940      	lsrs	r0, r0, #5
   b540e:	e000      	b.n	b5412 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   b5410:	2001      	movs	r0, #1
}
   b5412:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   b5414:	6800      	ldr	r0, [r0, #0]
   b5416:	b909      	cbnz	r1, b541c <_ZNK6String6equalsEPKc+0x1e>
   b5418:	7800      	ldrb	r0, [r0, #0]
   b541a:	e7f5      	b.n	b5408 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   b541c:	f7fe fdfe 	bl	b401c <strcmp>
   b5420:	e7f2      	b.n	b5408 <_ZNK6String6equalsEPKc+0xa>
	...

000b5424 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b5424:	4b05      	ldr	r3, [pc, #20]	; (b543c <_GLOBAL__sub_I_System+0x18>)
   b5426:	2202      	movs	r2, #2
   b5428:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b542a:	4b05      	ldr	r3, [pc, #20]	; (b5440 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b542c:	4a05      	ldr	r2, [pc, #20]	; (b5444 <_GLOBAL__sub_I_System+0x20>)
   b542e:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b5430:	2000      	movs	r0, #0
   b5432:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b5436:	f7ff bc73 	b.w	b4d20 <set_system_mode>
   b543a:	bf00      	nop
   b543c:	2003e710 	.word	0x2003e710
   b5440:	2003e704 	.word	0x2003e704
   b5444:	ffff0000 	.word	0xffff0000

000b5448 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   b5448:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b544a:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   b544c:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b5450:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b5452:	2201      	movs	r2, #1
   b5454:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b5458:	f10d 0107 	add.w	r1, sp, #7
   b545c:	47a0      	blx	r4
}
   b545e:	b002      	add	sp, #8
   b5460:	bd10      	pop	{r4, pc}

000b5462 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   b5462:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b5464:	6803      	ldr	r3, [r0, #0]
   b5466:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b5468:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b546c:	46a4      	mov	ip, r4
}
   b546e:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b5472:	4760      	bx	ip

000b5474 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b5474:	b513      	push	{r0, r1, r4, lr}
   b5476:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   b5478:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b547a:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   b547e:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b5480:	f10d 0107 	add.w	r1, sp, #7
   b5484:	2201      	movs	r2, #1
   b5486:	47a0      	blx	r4
}
   b5488:	b002      	add	sp, #8
   b548a:	bd10      	pop	{r4, pc}

000b548c <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   b548c:	b510      	push	{r4, lr}
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b548e:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b5490:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b5494:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b5498:	429a      	cmp	r2, r3
int TCPClient::read() {
   b549a:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b549c:	d008      	beq.n	b54b0 <_ZN9TCPClient4readEv+0x24>
   b549e:	6963      	ldr	r3, [r4, #20]
   b54a0:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b54a4:	1c51      	adds	r1, r2, #1
   b54a6:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   b54aa:	4413      	add	r3, r2
   b54ac:	7918      	ldrb	r0, [r3, #4]
}
   b54ae:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b54b0:	6803      	ldr	r3, [r0, #0]
   b54b2:	691b      	ldr	r3, [r3, #16]
   b54b4:	4798      	blx	r3
   b54b6:	2800      	cmp	r0, #0
   b54b8:	d1f1      	bne.n	b549e <_ZN9TCPClient4readEv+0x12>
   b54ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b54be:	e7f6      	b.n	b54ae <_ZN9TCPClient4readEv+0x22>

000b54c0 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   b54c0:	4770      	bx	lr

000b54c2 <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   b54c2:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b54c4:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   b54c6:	43c0      	mvns	r0, r0
   b54c8:	0fc0      	lsrs	r0, r0, #31
   b54ca:	4770      	bx	lr

000b54cc <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b54cc:	4770      	bx	lr
	...

000b54d0 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b54d0:	4b06      	ldr	r3, [pc, #24]	; (b54ec <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b54d2:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b54d4:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b54d6:	f100 040c 	add.w	r4, r0, #12
	    ||
   b54da:	d005      	beq.n	b54e8 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b54dc:	4608      	mov	r0, r1
   b54de:	f000 fce7 	bl	b5eb0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b54e2:	2800      	cmp	r0, #0
   b54e4:	bf08      	it	eq
   b54e6:	2400      	moveq	r4, #0
      }
   b54e8:	4620      	mov	r0, r4
   b54ea:	bd10      	pop	{r4, pc}
   b54ec:	000b62d0 	.word	0x000b62d0

000b54f0 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b54f0:	b510      	push	{r4, lr}
   b54f2:	21ac      	movs	r1, #172	; 0xac
   b54f4:	4604      	mov	r4, r0
   b54f6:	f7fe fde4 	bl	b40c2 <_ZdlPvj>
   b54fa:	4620      	mov	r0, r4
   b54fc:	bd10      	pop	{r4, pc}

000b54fe <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b54fe:	21ac      	movs	r1, #172	; 0xac
   b5500:	f7fe bddf 	b.w	b40c2 <_ZdlPvj>

000b5504 <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   b5504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   b5508:	f04f 0800 	mov.w	r8, #0
   b550c:	b086      	sub	sp, #24
   b550e:	461c      	mov	r4, r3
   b5510:	f8c0 8004 	str.w	r8, [r0, #4]
   b5514:	4605      	mov	r5, r0
   b5516:	460e      	mov	r6, r1
   b5518:	4617      	mov	r7, r2
    struct timeval tv = {};
   b551a:	4641      	mov	r1, r8
   b551c:	2210      	movs	r2, #16
   b551e:	a802      	add	r0, sp, #8
   b5520:	f000 fdec 	bl	b60fc <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   b5524:	1c63      	adds	r3, r4, #1
   b5526:	d009      	beq.n	b553c <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   b5528:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b552c:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   b5530:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   b5534:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   b5538:	435c      	muls	r4, r3
   b553a:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   b553c:	6968      	ldr	r0, [r5, #20]
   b553e:	2310      	movs	r3, #16
   b5540:	9300      	str	r3, [sp, #0]
   b5542:	6800      	ldr	r0, [r0, #0]
   b5544:	ab02      	add	r3, sp, #8
   b5546:	f241 0205 	movw	r2, #4101	; 0x1005
   b554a:	f640 71ff 	movw	r1, #4095	; 0xfff
   b554e:	f7ff fb47 	bl	b4be0 <sock_setsockopt>
    if (ret < 0) {
   b5552:	2800      	cmp	r0, #0
   b5554:	da07      	bge.n	b5566 <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   b5556:	f7ff fc97 	bl	b4e88 <__errno>
   b555a:	6803      	ldr	r3, [r0, #0]
   b555c:	606b      	str	r3, [r5, #4]
        return 0;
   b555e:	2000      	movs	r0, #0
}
   b5560:	b006      	add	sp, #24
   b5562:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   b5566:	6968      	ldr	r0, [r5, #20]
   b5568:	2300      	movs	r3, #0
   b556a:	6800      	ldr	r0, [r0, #0]
   b556c:	463a      	mov	r2, r7
   b556e:	4631      	mov	r1, r6
   b5570:	f7ff fb56 	bl	b4c20 <sock_send>
    if (ret < 0) {
   b5574:	1e03      	subs	r3, r0, #0
   b5576:	dbee      	blt.n	b5556 <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   b5578:	4618      	mov	r0, r3
   b557a:	e7f1      	b.n	b5560 <_ZN9TCPClient5writeEPKhjm+0x5c>

000b557c <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b557c:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   b557e:	6984      	ldr	r4, [r0, #24]
   b5580:	4b0a      	ldr	r3, [pc, #40]	; (b55ac <_ZN9TCPClientD1Ev+0x30>)
   b5582:	6003      	str	r3, [r0, #0]
   b5584:	4605      	mov	r5, r0
   b5586:	b17c      	cbz	r4, b55a8 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   b5588:	6863      	ldr	r3, [r4, #4]
   b558a:	3b01      	subs	r3, #1
   b558c:	6063      	str	r3, [r4, #4]
   b558e:	b95b      	cbnz	r3, b55a8 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   b5590:	6823      	ldr	r3, [r4, #0]
   b5592:	4620      	mov	r0, r4
   b5594:	689b      	ldr	r3, [r3, #8]
   b5596:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b5598:	68a3      	ldr	r3, [r4, #8]
   b559a:	3b01      	subs	r3, #1
   b559c:	60a3      	str	r3, [r4, #8]
   b559e:	b91b      	cbnz	r3, b55a8 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   b55a0:	6823      	ldr	r3, [r4, #0]
   b55a2:	4620      	mov	r0, r4
   b55a4:	68db      	ldr	r3, [r3, #12]
   b55a6:	4798      	blx	r3
   b55a8:	4628      	mov	r0, r5
   b55aa:	bd38      	pop	{r3, r4, r5, pc}
   b55ac:	000b63a4 	.word	0x000b63a4

000b55b0 <_ZN9TCPClientD0Ev>:
   b55b0:	b510      	push	{r4, lr}
   b55b2:	4604      	mov	r4, r0
   b55b4:	f7ff ffe2 	bl	b557c <_ZN9TCPClientD1Ev>
   b55b8:	4620      	mov	r0, r4
   b55ba:	211c      	movs	r1, #28
   b55bc:	f7fe fd81 	bl	b40c2 <_ZdlPvj>
   b55c0:	4620      	mov	r0, r4
   b55c2:	bd10      	pop	{r4, pc}

000b55c4 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b55c4:	b530      	push	{r4, r5, lr}
   b55c6:	b087      	sub	sp, #28
   b55c8:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b55ca:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b55cc:	4668      	mov	r0, sp
   b55ce:	f7ff fd3b 	bl	b5048 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b55d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b55d4:	3404      	adds	r4, #4
   b55d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b55d8:	682b      	ldr	r3, [r5, #0]
   b55da:	7023      	strb	r3, [r4, #0]
    }
   b55dc:	b007      	add	sp, #28
   b55de:	bd30      	pop	{r4, r5, pc}

000b55e0 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   b55e0:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   b55e2:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   b55e4:	4b05      	ldr	r3, [pc, #20]	; (b55fc <_ZN9TCPClient8remoteIPEv+0x1c>)
   b55e6:	4604      	mov	r4, r0
   b55e8:	358c      	adds	r5, #140	; 0x8c
   b55ea:	f844 3b04 	str.w	r3, [r4], #4
   b55ee:	4606      	mov	r6, r0
   b55f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b55f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b55f4:	682b      	ldr	r3, [r5, #0]
   b55f6:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   b55f8:	4630      	mov	r0, r6
   b55fa:	bd70      	pop	{r4, r5, r6, pc}
   b55fc:	000b631c 	.word	0x000b631c

000b5600 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b5600:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5604:	4698      	mov	r8, r3
    stop();
   b5606:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b5608:	b093      	sub	sp, #76	; 0x4c
   b560a:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   b560c:	2400      	movs	r4, #0
    stop();
   b560e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b5610:	4606      	mov	r6, r0
   b5612:	4617      	mov	r7, r2
    stop();
   b5614:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b5616:	4628      	mov	r0, r5
   b5618:	466b      	mov	r3, sp
   b561a:	4622      	mov	r2, r4
   b561c:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   b561e:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b5620:	f7ff fad6 	bl	b4bd0 <netdb_getaddrinfo>
   b5624:	4605      	mov	r5, r0
   b5626:	2800      	cmp	r0, #0
   b5628:	d163      	bne.n	b56f2 <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   b562a:	9b00      	ldr	r3, [sp, #0]
   b562c:	2b00      	cmp	r3, #0
   b562e:	d04b      	beq.n	b56c8 <_ZN9TCPClient7connectEPKctm+0xc8>
   b5630:	695b      	ldr	r3, [r3, #20]
   b5632:	2b00      	cmp	r3, #0
   b5634:	d048      	beq.n	b56c8 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   b5636:	a806      	add	r0, sp, #24
   b5638:	f7ff fcc2 	bl	b4fc0 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b563c:	9b00      	ldr	r3, [sp, #0]
   b563e:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   b5640:	7863      	ldrb	r3, [r4, #1]
   b5642:	2b02      	cmp	r3, #2
   b5644:	d104      	bne.n	b5650 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b5646:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b5648:	a806      	add	r0, sp, #24
   b564a:	f7ff ffbb 	bl	b55c4 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   b564e:	e026      	b.n	b569e <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   b5650:	2b0a      	cmp	r3, #10
   b5652:	d124      	bne.n	b569e <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   b5654:	2211      	movs	r2, #17
   b5656:	4629      	mov	r1, r5
   b5658:	a801      	add	r0, sp, #4
   b565a:	f000 fd4f 	bl	b60fc <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b565e:	68a3      	ldr	r3, [r4, #8]
   b5660:	2b00      	cmp	r3, #0
   b5662:	d038      	beq.n	b56d6 <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b5664:	f104 0308 	add.w	r3, r4, #8
   b5668:	f10d 0c04 	add.w	ip, sp, #4
   b566c:	3418      	adds	r4, #24
   b566e:	6818      	ldr	r0, [r3, #0]
   b5670:	6859      	ldr	r1, [r3, #4]
   b5672:	4662      	mov	r2, ip
   b5674:	c203      	stmia	r2!, {r0, r1}
   b5676:	3308      	adds	r3, #8
   b5678:	42a3      	cmp	r3, r4
   b567a:	4694      	mov	ip, r2
   b567c:	d1f7      	bne.n	b566e <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   b567e:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b5680:	a901      	add	r1, sp, #4
   b5682:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   b5684:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b5688:	f7ff fca8 	bl	b4fdc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b568c:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b5690:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b5694:	ac07      	add	r4, sp, #28
   b5696:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5698:	f8dc 3000 	ldr.w	r3, [ip]
   b569c:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   b569e:	a806      	add	r0, sp, #24
   b56a0:	f7ff fcae 	bl	b5000 <_ZNK9IPAddresscvbEv>
        if (addr) {
   b56a4:	b180      	cbz	r0, b56c8 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   b56a6:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b56a8:	ad07      	add	r5, sp, #28
   b56aa:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b56ae:	4b12      	ldr	r3, [pc, #72]	; (b56f8 <_ZN9TCPClient7connectEPKctm+0xf8>)
   b56b0:	930c      	str	r3, [sp, #48]	; 0x30
   b56b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b56b4:	ac0d      	add	r4, sp, #52	; 0x34
   b56b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b56b8:	682b      	ldr	r3, [r5, #0]
   b56ba:	7023      	strb	r3, [r4, #0]
   b56bc:	463a      	mov	r2, r7
   b56be:	4643      	mov	r3, r8
   b56c0:	a90c      	add	r1, sp, #48	; 0x30
   b56c2:	4630      	mov	r0, r6
   b56c4:	47c8      	blx	r9
   b56c6:	4605      	mov	r5, r0
    SCOPE_GUARD({
   b56c8:	9800      	ldr	r0, [sp, #0]
   b56ca:	f7ff fa79 	bl	b4bc0 <netdb_freeaddrinfo>
}
   b56ce:	4628      	mov	r0, r5
   b56d0:	b013      	add	sp, #76	; 0x4c
   b56d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b56d6:	68e3      	ldr	r3, [r4, #12]
   b56d8:	2b00      	cmp	r3, #0
   b56da:	d1c3      	bne.n	b5664 <_ZN9TCPClient7connectEPKctm+0x64>
   b56dc:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b56e0:	f8d4 9010 	ldr.w	r9, [r4, #16]
   b56e4:	f7ff fa5c 	bl	b4ba0 <inet_htonl>
   b56e8:	4581      	cmp	r9, r0
   b56ea:	d1bb      	bne.n	b5664 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   b56ec:	f104 0114 	add.w	r1, r4, #20
   b56f0:	e7aa      	b.n	b5648 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b56f2:	4625      	mov	r5, r4
   b56f4:	e7e8      	b.n	b56c8 <_ZN9TCPClient7connectEPKctm+0xc8>
   b56f6:	bf00      	nop
   b56f8:	000b631c 	.word	0x000b631c

000b56fc <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   b56fc:	b538      	push	{r3, r4, r5, lr}
   b56fe:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   b5700:	681a      	ldr	r2, [r3, #0]
   b5702:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   b5704:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   b5706:	da10      	bge.n	b572a <_ZN9TCPClient9connectedEv+0x2e>
   b5708:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b570c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b5710:	429a      	cmp	r2, r3
   b5712:	d10a      	bne.n	b572a <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   b5714:	6803      	ldr	r3, [r0, #0]
   b5716:	691b      	ldr	r3, [r3, #16]
   b5718:	4798      	blx	r3
        if (!rv) {
   b571a:	4604      	mov	r4, r0
   b571c:	b928      	cbnz	r0, b572a <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   b571e:	682b      	ldr	r3, [r5, #0]
   b5720:	4628      	mov	r0, r5
   b5722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5724:	4798      	blx	r3
        rv = available();
   b5726:	4620      	mov	r0, r4
}
   b5728:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   b572a:	2001      	movs	r0, #1
   b572c:	e7fc      	b.n	b5728 <_ZN9TCPClient9connectedEv+0x2c>

000b572e <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   b572e:	b510      	push	{r4, lr}
   b5730:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b5732:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b5736:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b573a:	429a      	cmp	r2, r3
int TCPClient::peek() {
   b573c:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b573e:	d005      	beq.n	b574c <_ZN9TCPClient4peekEv+0x1e>
   b5740:	6963      	ldr	r3, [r4, #20]
   b5742:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b5746:	4413      	add	r3, r2
   b5748:	7918      	ldrb	r0, [r3, #4]
}
   b574a:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b574c:	6803      	ldr	r3, [r0, #0]
   b574e:	691b      	ldr	r3, [r3, #16]
   b5750:	4798      	blx	r3
   b5752:	2800      	cmp	r0, #0
   b5754:	d1f4      	bne.n	b5740 <_ZN9TCPClient4peekEv+0x12>
   b5756:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b575a:	e7f6      	b.n	b574a <_ZN9TCPClient4peekEv+0x1c>

000b575c <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   b575c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b575e:	6943      	ldr	r3, [r0, #20]
   b5760:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   b5762:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b5766:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b576a:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   b576c:	4605      	mov	r5, r0
   b576e:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   b5770:	d016      	beq.n	b57a0 <_ZN9TCPClient4readEPhj+0x44>
   b5772:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   b5774:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   b5778:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   b577c:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   b577e:	42bc      	cmp	r4, r7
   b5780:	bf28      	it	cs
   b5782:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   b5784:	3304      	adds	r3, #4
   b5786:	4622      	mov	r2, r4
   b5788:	4419      	add	r1, r3
   b578a:	4630      	mov	r0, r6
   b578c:	f000 fca8 	bl	b60e0 <memcpy>
   b5790:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   b5792:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   b5796:	4423      	add	r3, r4
   b5798:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   b579c:	4620      	mov	r0, r4
   b579e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   b57a0:	6803      	ldr	r3, [r0, #0]
   b57a2:	691b      	ldr	r3, [r3, #16]
   b57a4:	4798      	blx	r3
   b57a6:	2800      	cmp	r0, #0
   b57a8:	d1e3      	bne.n	b5772 <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   b57aa:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   b57ae:	e7f5      	b.n	b579c <_ZN9TCPClient4readEPhj+0x40>

000b57b0 <_ZN9TCPClient12flush_bufferEv>:
   b57b0:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   b57b2:	2300      	movs	r3, #0
   b57b4:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   b57b8:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   b57ba:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   b57be:	4770      	bx	lr

000b57c0 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b57c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b57c4:	461f      	mov	r7, r3
    stop();
   b57c6:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b57c8:	460c      	mov	r4, r1
    stop();
   b57ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b57cc:	b08a      	sub	sp, #40	; 0x28
   b57ce:	4605      	mov	r5, r0
   b57d0:	4616      	mov	r6, r2
    stop();
   b57d2:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   b57d4:	7d23      	ldrb	r3, [r4, #20]
   b57d6:	f8d5 8014 	ldr.w	r8, [r5, #20]
   b57da:	2b04      	cmp	r3, #4
   b57dc:	bf0c      	ite	eq
   b57de:	2002      	moveq	r0, #2
   b57e0:	200a      	movne	r0, #10
   b57e2:	2206      	movs	r2, #6
   b57e4:	2101      	movs	r1, #1
   b57e6:	f7ff fa23 	bl	b4c30 <sock_socket>
   b57ea:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   b57ee:	696b      	ldr	r3, [r5, #20]
   b57f0:	681b      	ldr	r3, [r3, #0]
   b57f2:	2b00      	cmp	r3, #0
   b57f4:	da08      	bge.n	b5808 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   b57f6:	682b      	ldr	r3, [r5, #0]
   b57f8:	4628      	mov	r0, r5
   b57fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b57fc:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   b57fe:	4798      	blx	r3
}
   b5800:	4620      	mov	r0, r4
   b5802:	b00a      	add	sp, #40	; 0x28
   b5804:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   b5808:	4628      	mov	r0, r5
   b580a:	f7ff ffd1 	bl	b57b0 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   b580e:	b1b7      	cbz	r7, b583e <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   b5810:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b5812:	a903      	add	r1, sp, #12
   b5814:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   b5816:	9303      	str	r3, [sp, #12]
   b5818:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b581c:	f7ff f9b0 	bl	b4b80 <if_index_to_name>
   b5820:	2800      	cmp	r0, #0
   b5822:	d1e8      	bne.n	b57f6 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   b5824:	6968      	ldr	r0, [r5, #20]
   b5826:	2306      	movs	r3, #6
   b5828:	9300      	str	r3, [sp, #0]
   b582a:	6800      	ldr	r0, [r0, #0]
   b582c:	ab03      	add	r3, sp, #12
   b582e:	f241 020b 	movw	r2, #4107	; 0x100b
   b5832:	f640 71ff 	movw	r1, #4095	; 0xfff
   b5836:	f7ff f9d3 	bl	b4be0 <sock_setsockopt>
   b583a:	2800      	cmp	r0, #0
   b583c:	d1db      	bne.n	b57f6 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   b583e:	221c      	movs	r2, #28
   b5840:	2100      	movs	r1, #0
   b5842:	a803      	add	r0, sp, #12
   b5844:	f000 fc5a 	bl	b60fc <memset>
    if (ip.version() == 4) {
   b5848:	7d23      	ldrb	r3, [r4, #20]
   b584a:	2b04      	cmp	r3, #4
   b584c:	d11d      	bne.n	b588a <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   b584e:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   b5852:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   b5854:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   b5858:	f7ff f9aa 	bl	b4bb0 <inet_htons>
   b585c:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   b5860:	6860      	ldr	r0, [r4, #4]
   b5862:	f7ff f99d 	bl	b4ba0 <inet_htonl>
   b5866:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   b5868:	696b      	ldr	r3, [r5, #20]
   b586a:	221c      	movs	r2, #28
   b586c:	6818      	ldr	r0, [r3, #0]
   b586e:	a903      	add	r1, sp, #12
   b5870:	f7ff f9c6 	bl	b4c00 <sock_connect>
   b5874:	2800      	cmp	r0, #0
   b5876:	d1be      	bne.n	b57f6 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   b5878:	3404      	adds	r4, #4
   b587a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b587c:	696d      	ldr	r5, [r5, #20]
   b587e:	358c      	adds	r5, #140	; 0x8c
   b5880:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b5882:	6823      	ldr	r3, [r4, #0]
   b5884:	702b      	strb	r3, [r5, #0]
    return 1; // success
   b5886:	2401      	movs	r4, #1
   b5888:	e7ba      	b.n	b5800 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   b588a:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   b588e:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   b5890:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   b5894:	f7ff f98c 	bl	b4bb0 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b5898:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   b589a:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b589e:	1d23      	adds	r3, r4, #4
   b58a0:	f104 0714 	add.w	r7, r4, #20
   b58a4:	6818      	ldr	r0, [r3, #0]
   b58a6:	6859      	ldr	r1, [r3, #4]
   b58a8:	4632      	mov	r2, r6
   b58aa:	c203      	stmia	r2!, {r0, r1}
   b58ac:	3308      	adds	r3, #8
   b58ae:	42bb      	cmp	r3, r7
   b58b0:	4616      	mov	r6, r2
   b58b2:	d1f7      	bne.n	b58a4 <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   b58b4:	e7d8      	b.n	b5868 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000b58b8 <_ZN9TCPClient9availableEv>:
{
   b58b8:	b530      	push	{r4, r5, lr}
   b58ba:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   b58bc:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   b58c0:	b08b      	sub	sp, #44	; 0x2c
   b58c2:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   b58c4:	b12b      	cbz	r3, b58d2 <_ZN9TCPClient9availableEv+0x1a>
   b58c6:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   b58ca:	429a      	cmp	r2, r3
   b58cc:	d101      	bne.n	b58d2 <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   b58ce:	f7ff ff6f 	bl	b57b0 <_ZN9TCPClient12flush_bufferEv>
   b58d2:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   b58d4:	6808      	ldr	r0, [r1, #0]
   b58d6:	2800      	cmp	r0, #0
   b58d8:	db18      	blt.n	b590c <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   b58da:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   b58de:	2d7f      	cmp	r5, #127	; 0x7f
   b58e0:	d814      	bhi.n	b590c <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   b58e2:	3104      	adds	r1, #4
   b58e4:	2308      	movs	r3, #8
   b58e6:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   b58ea:	4429      	add	r1, r5
   b58ec:	f7ff f990 	bl	b4c10 <sock_recv>
            if (ret > 0) {
   b58f0:	2800      	cmp	r0, #0
   b58f2:	dd13      	ble.n	b591c <_ZN9TCPClient9availableEv+0x64>
   b58f4:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   b58f6:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b58fa:	b90a      	cbnz	r2, b5900 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   b58fc:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   b5900:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   b5902:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b5906:	4410      	add	r0, r2
   b5908:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   b590c:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   b590e:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   b5912:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   b5916:	1ac0      	subs	r0, r0, r3
   b5918:	b00b      	add	sp, #44	; 0x2c
   b591a:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   b591c:	f7ff fab4 	bl	b4e88 <__errno>
   b5920:	6803      	ldr	r3, [r0, #0]
   b5922:	2b0b      	cmp	r3, #11
   b5924:	d0f2      	beq.n	b590c <_ZN9TCPClient9availableEv+0x54>
   b5926:	f7ff faaf 	bl	b4e88 <__errno>
   b592a:	6803      	ldr	r3, [r0, #0]
   b592c:	2b0b      	cmp	r3, #11
   b592e:	d0ed      	beq.n	b590c <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   b5930:	2320      	movs	r3, #32
   b5932:	2500      	movs	r5, #0
   b5934:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b5938:	f7ff faa6 	bl	b4e88 <__errno>
   b593c:	6803      	ldr	r3, [r0, #0]
   b593e:	9301      	str	r3, [sp, #4]
   b5940:	4b08      	ldr	r3, [pc, #32]	; (b5964 <_ZN9TCPClient9availableEv+0xac>)
   b5942:	4909      	ldr	r1, [pc, #36]	; (b5968 <_ZN9TCPClient9availableEv+0xb0>)
   b5944:	9300      	str	r3, [sp, #0]
   b5946:	aa02      	add	r2, sp, #8
   b5948:	462b      	mov	r3, r5
   b594a:	2032      	movs	r0, #50	; 0x32
   b594c:	f7ff f9e0 	bl	b4d10 <log_message>
                    sock_close(d_->sock);
   b5950:	6963      	ldr	r3, [r4, #20]
   b5952:	6818      	ldr	r0, [r3, #0]
   b5954:	f7ff f94c 	bl	b4bf0 <sock_close>
   b5958:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   b595a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b595e:	601a      	str	r2, [r3, #0]
   b5960:	e7d4      	b.n	b590c <_ZN9TCPClient9availableEv+0x54>
   b5962:	bf00      	nop
   b5964:	000b636f 	.word	0x000b636f
   b5968:	000b6368 	.word	0x000b6368

000b596c <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   b596c:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   b596e:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   b5970:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   b5972:	6818      	ldr	r0, [r3, #0]
   b5974:	2800      	cmp	r0, #0
   b5976:	db01      	blt.n	b597c <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   b5978:	f7ff f93a 	bl	b4bf0 <sock_close>
   b597c:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   b597e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b5982:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   b5984:	6960      	ldr	r0, [r4, #20]
   b5986:	2211      	movs	r2, #17
   b5988:	2100      	movs	r1, #0
   b598a:	308c      	adds	r0, #140	; 0x8c
   b598c:	f000 fbb6 	bl	b60fc <memset>
    flush_buffer();
   b5990:	4620      	mov	r0, r4
}
   b5992:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   b5996:	f7ff bf0b 	b.w	b57b0 <_ZN9TCPClient12flush_bufferEv>

000b599a <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   b599a:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   b599c:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   b599e:	4604      	mov	r4, r0
          total(0) {
   b59a0:	6001      	str	r1, [r0, #0]
   b59a2:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   b59a6:	3088      	adds	r0, #136	; 0x88
   b59a8:	f7ff fb0a 	bl	b4fc0 <_ZN9IPAddressC1Ev>
}
   b59ac:	4620      	mov	r0, r4
   b59ae:	bd10      	pop	{r4, pc}

000b59b0 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   b59b0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b59b2:	2300      	movs	r3, #0
   b59b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b59b8:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   b59bc:	4a0e      	ldr	r2, [pc, #56]	; (b59f8 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   b59be:	6103      	str	r3, [r0, #16]
   b59c0:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b59c2:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   b59c4:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b59c6:	20ac      	movs	r0, #172	; 0xac
   b59c8:	9101      	str	r1, [sp, #4]
   b59ca:	f7fe fb74 	bl	b40b6 <_Znwj>
	  auto __pi = ::new (__mem)
   b59ce:	1e05      	subs	r5, r0, #0
   b59d0:	f105 060c 	add.w	r6, r5, #12
   b59d4:	d008      	beq.n	b59e8 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   b59d6:	2301      	movs	r3, #1
   b59d8:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b59dc:	4b07      	ldr	r3, [pc, #28]	; (b59fc <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b59de:	9901      	ldr	r1, [sp, #4]
   b59e0:	602b      	str	r3, [r5, #0]
   b59e2:	4630      	mov	r0, r6
   b59e4:	f7ff ffd9 	bl	b599a <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   b59e8:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   b59ea:	e9c4 6505 	strd	r6, r5, [r4, #20]
   b59ee:	f7ff fedf 	bl	b57b0 <_ZN9TCPClient12flush_bufferEv>
}
   b59f2:	b002      	add	sp, #8
   b59f4:	bd70      	pop	{r4, r5, r6, pc}
   b59f6:	bf00      	nop
   b59f8:	000b63a4 	.word	0x000b63a4
   b59fc:	000b6388 	.word	0x000b6388

000b5a00 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   b5a00:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   b5a02:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
TCPClient::TCPClient()
   b5a06:	4604      	mov	r4, r0
        : TCPClient(-1) {
   b5a08:	f7ff ffd2 	bl	b59b0 <_ZN9TCPClientC1Ei>
}
   b5a0c:	4620      	mov	r0, r4
   b5a0e:	bd10      	pop	{r4, pc}

000b5a10 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   b5a10:	b510      	push	{r4, lr}
   b5a12:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   b5a14:	6800      	ldr	r0, [r0, #0]
   b5a16:	2800      	cmp	r0, #0
   b5a18:	db01      	blt.n	b5a1e <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   b5a1a:	f7ff f8e9 	bl	b4bf0 <sock_close>
    }
}
   b5a1e:	4620      	mov	r0, r4
   b5a20:	bd10      	pop	{r4, pc}

000b5a22 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   b5a22:	300c      	adds	r0, #12
   b5a24:	f7ff bff4 	b.w	b5a10 <_ZN9TCPClient4DataD1Ev>

000b5a28 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b5a28:	4b02      	ldr	r3, [pc, #8]	; (b5a34 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b5a2a:	681a      	ldr	r2, [r3, #0]
   b5a2c:	4b02      	ldr	r3, [pc, #8]	; (b5a38 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b5a2e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b5a30:	4770      	bx	lr
   b5a32:	bf00      	nop
   b5a34:	2003e608 	.word	0x2003e608
   b5a38:	2003e714 	.word	0x2003e714

000b5a3c <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b5a3c:	4770      	bx	lr

000b5a3e <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b5a3e:	7441      	strb	r1, [r0, #17]
}
   b5a40:	4770      	bx	lr

000b5a42 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b5a42:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b5a44:	7c00      	ldrb	r0, [r0, #16]
   b5a46:	f7ff f923 	bl	b4c90 <hal_usart_available_data_for_write>
}
   b5a4a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5a4e:	bd08      	pop	{r3, pc}

000b5a50 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b5a50:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b5a52:	7c00      	ldrb	r0, [r0, #16]
   b5a54:	f7ff f8fc 	bl	b4c50 <hal_usart_available>
}
   b5a58:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5a5c:	bd08      	pop	{r3, pc}

000b5a5e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b5a5e:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b5a60:	7c00      	ldrb	r0, [r0, #16]
   b5a62:	f7ff f905 	bl	b4c70 <hal_usart_peek>
}
   b5a66:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5a6a:	bd08      	pop	{r3, pc}

000b5a6c <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b5a6c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b5a6e:	7c00      	ldrb	r0, [r0, #16]
   b5a70:	f7ff f8f6 	bl	b4c60 <hal_usart_read>
}
   b5a74:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5a78:	bd08      	pop	{r3, pc}

000b5a7a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b5a7a:	7c00      	ldrb	r0, [r0, #16]
   b5a7c:	f7ff b900 	b.w	b4c80 <hal_usart_flush>

000b5a80 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b5a80:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5a82:	7c45      	ldrb	r5, [r0, #17]
{
   b5a84:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5a86:	b12d      	cbz	r5, b5a94 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b5a88:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b5a8a:	b003      	add	sp, #12
   b5a8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b5a90:	f7ff b8d6 	b.w	b4c40 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5a94:	7c00      	ldrb	r0, [r0, #16]
   b5a96:	9101      	str	r1, [sp, #4]
   b5a98:	f7ff f8fa 	bl	b4c90 <hal_usart_available_data_for_write>
   b5a9c:	2800      	cmp	r0, #0
   b5a9e:	9901      	ldr	r1, [sp, #4]
   b5aa0:	dcf2      	bgt.n	b5a88 <_ZN11USARTSerial5writeEh+0x8>
}
   b5aa2:	4628      	mov	r0, r5
   b5aa4:	b003      	add	sp, #12
   b5aa6:	bd30      	pop	{r4, r5, pc}

000b5aa8 <_ZN11USARTSerialD0Ev>:
   b5aa8:	b510      	push	{r4, lr}
   b5aaa:	2114      	movs	r1, #20
   b5aac:	4604      	mov	r4, r0
   b5aae:	f7fe fb08 	bl	b40c2 <_ZdlPvj>
   b5ab2:	4620      	mov	r0, r4
   b5ab4:	bd10      	pop	{r4, pc}
	...

000b5ab8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b5ab8:	b510      	push	{r4, lr}
   b5aba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5abe:	4604      	mov	r4, r0
   b5ac0:	4608      	mov	r0, r1
   b5ac2:	4611      	mov	r1, r2
   b5ac4:	2200      	movs	r2, #0
   b5ac6:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b5aca:	4b04      	ldr	r3, [pc, #16]	; (b5adc <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b5acc:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b5ace:	2301      	movs	r3, #1
  _serial = serial;
   b5ad0:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b5ad2:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b5ad4:	f7ff f8e4 	bl	b4ca0 <hal_usart_init_ex>
}
   b5ad8:	4620      	mov	r0, r4
   b5ada:	bd10      	pop	{r4, pc}
   b5adc:	000b640c 	.word	0x000b640c

000b5ae0 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b5ae0:	7441      	strb	r1, [r0, #17]
}
   b5ae2:	4770      	bx	lr

000b5ae4 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5ae4:	4770      	bx	lr

000b5ae6 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b5ae6:	4770      	bx	lr

000b5ae8 <_ZN9USBSerial4readEv>:
{
   b5ae8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b5aea:	2100      	movs	r1, #0
   b5aec:	7c00      	ldrb	r0, [r0, #16]
   b5aee:	f7ff f8f7 	bl	b4ce0 <HAL_USB_USART_Receive_Data>
}
   b5af2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5af6:	bd08      	pop	{r3, pc}

000b5af8 <_ZN9USBSerial4peekEv>:
{
   b5af8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b5afa:	2101      	movs	r1, #1
   b5afc:	7c00      	ldrb	r0, [r0, #16]
   b5afe:	f7ff f8ef 	bl	b4ce0 <HAL_USB_USART_Receive_Data>
}
   b5b02:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5b06:	bd08      	pop	{r3, pc}

000b5b08 <_ZN9USBSerial17availableForWriteEv>:
{
   b5b08:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b5b0a:	7c00      	ldrb	r0, [r0, #16]
   b5b0c:	f7ff f8e0 	bl	b4cd0 <HAL_USB_USART_Available_Data_For_Write>
}
   b5b10:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5b14:	bd08      	pop	{r3, pc}

000b5b16 <_ZN9USBSerial9availableEv>:
{
   b5b16:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b5b18:	7c00      	ldrb	r0, [r0, #16]
   b5b1a:	f7ff f8d1 	bl	b4cc0 <HAL_USB_USART_Available_Data>
}
   b5b1e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5b22:	bd08      	pop	{r3, pc}

000b5b24 <_ZN9USBSerial5writeEh>:
{
   b5b24:	b513      	push	{r0, r1, r4, lr}
   b5b26:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b5b28:	7c00      	ldrb	r0, [r0, #16]
{
   b5b2a:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b5b2c:	f7ff f8d0 	bl	b4cd0 <HAL_USB_USART_Available_Data_For_Write>
   b5b30:	2800      	cmp	r0, #0
   b5b32:	9901      	ldr	r1, [sp, #4]
   b5b34:	dc01      	bgt.n	b5b3a <_ZN9USBSerial5writeEh+0x16>
   b5b36:	7c60      	ldrb	r0, [r4, #17]
   b5b38:	b120      	cbz	r0, b5b44 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b5b3a:	7c20      	ldrb	r0, [r4, #16]
   b5b3c:	f7ff f8d8 	bl	b4cf0 <HAL_USB_USART_Send_Data>
   b5b40:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b5b44:	b002      	add	sp, #8
   b5b46:	bd10      	pop	{r4, pc}

000b5b48 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b5b48:	7c00      	ldrb	r0, [r0, #16]
   b5b4a:	f7ff b8d9 	b.w	b4d00 <HAL_USB_USART_Flush_Data>

000b5b4e <_ZN9USBSerialD0Ev>:
   b5b4e:	b510      	push	{r4, lr}
   b5b50:	2114      	movs	r1, #20
   b5b52:	4604      	mov	r4, r0
   b5b54:	f7fe fab5 	bl	b40c2 <_ZdlPvj>
   b5b58:	4620      	mov	r0, r4
   b5b5a:	bd10      	pop	{r4, pc}

000b5b5c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b5b5c:	b510      	push	{r4, lr}
   b5b5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5b62:	4604      	mov	r4, r0
   b5b64:	4608      	mov	r0, r1
   b5b66:	2100      	movs	r1, #0
   b5b68:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b5b6c:	4b04      	ldr	r3, [pc, #16]	; (b5b80 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b5b6e:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b5b70:	2301      	movs	r3, #1
  _serial = serial;
   b5b72:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b5b74:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b5b76:	4611      	mov	r1, r2
   b5b78:	f7ff f89a 	bl	b4cb0 <HAL_USB_USART_Init>
}
   b5b7c:	4620      	mov	r0, r4
   b5b7e:	bd10      	pop	{r4, pc}
   b5b80:	000b643c 	.word	0x000b643c

000b5b84 <_Z19acquireSerialBufferv>:
{
   b5b84:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b5b86:	2214      	movs	r2, #20
{
   b5b88:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b5b8a:	2100      	movs	r1, #0
   b5b8c:	f000 fab6 	bl	b60fc <memset>
}
   b5b90:	4620      	mov	r0, r4
   b5b92:	bd10      	pop	{r4, pc}

000b5b94 <_Z16_fetch_usbserialv>:
{
   b5b94:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5b96:	4c0f      	ldr	r4, [pc, #60]	; (b5bd4 <_Z16_fetch_usbserialv+0x40>)
{
   b5b98:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b5b9a:	a803      	add	r0, sp, #12
   b5b9c:	f7ff fff2 	bl	b5b84 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5ba0:	7821      	ldrb	r1, [r4, #0]
   b5ba2:	f3bf 8f5b 	dmb	ish
   b5ba6:	f011 0101 	ands.w	r1, r1, #1
   b5baa:	d10f      	bne.n	b5bcc <_Z16_fetch_usbserialv+0x38>
   b5bac:	4620      	mov	r0, r4
   b5bae:	9101      	str	r1, [sp, #4]
   b5bb0:	f7fe fa89 	bl	b40c6 <__cxa_guard_acquire>
   b5bb4:	9901      	ldr	r1, [sp, #4]
   b5bb6:	b148      	cbz	r0, b5bcc <_Z16_fetch_usbserialv+0x38>
   b5bb8:	aa03      	add	r2, sp, #12
   b5bba:	4807      	ldr	r0, [pc, #28]	; (b5bd8 <_Z16_fetch_usbserialv+0x44>)
   b5bbc:	f7ff ffce 	bl	b5b5c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b5bc0:	4620      	mov	r0, r4
   b5bc2:	f7fe fa85 	bl	b40d0 <__cxa_guard_release>
   b5bc6:	4805      	ldr	r0, [pc, #20]	; (b5bdc <_Z16_fetch_usbserialv+0x48>)
   b5bc8:	f000 fa84 	bl	b60d4 <atexit>
	return _usbserial;
}
   b5bcc:	4802      	ldr	r0, [pc, #8]	; (b5bd8 <_Z16_fetch_usbserialv+0x44>)
   b5bce:	b008      	add	sp, #32
   b5bd0:	bd10      	pop	{r4, pc}
   b5bd2:	bf00      	nop
   b5bd4:	2003e718 	.word	0x2003e718
   b5bd8:	2003e71c 	.word	0x2003e71c
   b5bdc:	000b5ae5 	.word	0x000b5ae5

000b5be0 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b5be0:	2200      	movs	r2, #0
   b5be2:	6840      	ldr	r0, [r0, #4]
   b5be4:	4611      	mov	r1, r2
   b5be6:	f7ff b8ef 	b.w	b4dc8 <network_ready>

000b5bea <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b5bea:	2200      	movs	r2, #0
   b5bec:	6840      	ldr	r0, [r0, #4]
   b5bee:	4611      	mov	r1, r2
   b5bf0:	f7ff b90a 	b.w	b4e08 <network_listening>

000b5bf4 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b5bf4:	2200      	movs	r2, #0
   b5bf6:	6840      	ldr	r0, [r0, #4]
   b5bf8:	4611      	mov	r1, r2
   b5bfa:	f7ff b915 	b.w	b4e28 <network_get_listen_timeout>

000b5bfe <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b5bfe:	6840      	ldr	r0, [r0, #4]
   b5c00:	2200      	movs	r2, #0
   b5c02:	f7ff b909 	b.w	b4e18 <network_set_listen_timeout>

000b5c06 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b5c06:	6840      	ldr	r0, [r0, #4]
   b5c08:	2200      	movs	r2, #0
   b5c0a:	f081 0101 	eor.w	r1, r1, #1
   b5c0e:	f7ff b8f3 	b.w	b4df8 <network_listen>

000b5c12 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b5c12:	2300      	movs	r3, #0
   b5c14:	6840      	ldr	r0, [r0, #4]
   b5c16:	461a      	mov	r2, r3
   b5c18:	4619      	mov	r1, r3
   b5c1a:	f7ff b8e5 	b.w	b4de8 <network_off>

000b5c1e <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b5c1e:	2300      	movs	r3, #0
   b5c20:	6840      	ldr	r0, [r0, #4]
   b5c22:	461a      	mov	r2, r3
   b5c24:	4619      	mov	r1, r3
   b5c26:	f7ff b8d7 	b.w	b4dd8 <network_on>

000b5c2a <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b5c2a:	2200      	movs	r2, #0
   b5c2c:	6840      	ldr	r0, [r0, #4]
   b5c2e:	4611      	mov	r1, r2
   b5c30:	f7ff b8ba 	b.w	b4da8 <network_connecting>

000b5c34 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b5c34:	6840      	ldr	r0, [r0, #4]
   b5c36:	2200      	movs	r2, #0
   b5c38:	2102      	movs	r1, #2
   b5c3a:	f7ff b8bd 	b.w	b4db8 <network_disconnect>

000b5c3e <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b5c3e:	2300      	movs	r3, #0
   b5c40:	6840      	ldr	r0, [r0, #4]
   b5c42:	461a      	mov	r2, r3
   b5c44:	f7ff b8a8 	b.w	b4d98 <network_connect>

000b5c48 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b5c48:	4b02      	ldr	r3, [pc, #8]	; (b5c54 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b5c4a:	2204      	movs	r2, #4
   b5c4c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b5c4e:	4a02      	ldr	r2, [pc, #8]	; (b5c58 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b5c50:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b5c52:	4770      	bx	lr
   b5c54:	2003e730 	.word	0x2003e730
   b5c58:	000b646c 	.word	0x000b646c

000b5c5c <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   b5c5c:	b510      	push	{r4, lr}
   b5c5e:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   b5c60:	f7fe f9e6 	bl	b4030 <strlen>
   b5c64:	3801      	subs	r0, #1
   b5c66:	1823      	adds	r3, r4, r0
   b5c68:	4620      	mov	r0, r4
	while(i<j){
   b5c6a:	4283      	cmp	r3, r0
   b5c6c:	d906      	bls.n	b5c7c <_Z11str_reversePc+0x20>
		c = *i;
   b5c6e:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   b5c70:	7819      	ldrb	r1, [r3, #0]
   b5c72:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   b5c76:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   b5c7a:	e7f6      	b.n	b5c6a <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   b5c7c:	bd10      	pop	{r4, pc}

000b5c7e <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   b5c7e:	b570      	push	{r4, r5, r6, lr}
   b5c80:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   b5c82:	1e91      	subs	r1, r2, #2
   b5c84:	2922      	cmp	r1, #34	; 0x22
   b5c86:	d81d      	bhi.n	b5cc4 <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   b5c88:	4625      	mov	r5, r4

	div_t result;
	while(a){
   b5c8a:	b930      	cbnz	r0, b5c9a <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   b5c8c:	4423      	add	r3, r4
            *ptr++ = '0';
   b5c8e:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   b5c90:	429d      	cmp	r5, r3
   b5c92:	d210      	bcs.n	b5cb6 <ultoa+0x38>
            *ptr++ = '0';
   b5c94:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   b5c98:	e7fa      	b.n	b5c90 <ultoa+0x12>
            result.quot = a/radix;
   b5c9a:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   b5c9e:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   b5ca2:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   b5ca4:	2809      	cmp	r0, #9
                *ptr += '0';
   b5ca6:	bf94      	ite	ls
   b5ca8:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   b5caa:	3157      	addhi	r1, #87	; 0x57
   b5cac:	b2c9      	uxtb	r1, r1
   b5cae:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   b5cb2:	4630      	mov	r0, r6
	while(a){
   b5cb4:	e7e9      	b.n	b5c8a <ultoa+0xc>

	*ptr = '\0';
   b5cb6:	2300      	movs	r3, #0
	str_reverse(buffer);
   b5cb8:	4620      	mov	r0, r4
	*ptr = '\0';
   b5cba:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   b5cbc:	f7ff ffce 	bl	b5c5c <_Z11str_reversePc>
	return buffer;
   b5cc0:	4620      	mov	r0, r4
}
   b5cc2:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   b5cc4:	2000      	movs	r0, #0
   b5cc6:	e7fc      	b.n	b5cc2 <ultoa+0x44>

000b5cc8 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b5cc8:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   b5cca:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b5ccc:	460c      	mov	r4, r1
   b5cce:	4615      	mov	r5, r2
	if(a<0){
   b5cd0:	da0e      	bge.n	b5cf0 <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b5cd2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   b5cd6:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b5cda:	bf14      	ite	ne
   b5cdc:	4258      	negne	r0, r3
   b5cde:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   b5ce0:	2301      	movs	r3, #1
		*buffer = '-';
   b5ce2:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   b5ce4:	462a      	mov	r2, r5
   b5ce6:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   b5ce8:	f7ff ffc9 	bl	b5c7e <ultoa>
	}
	return buffer;
}
   b5cec:	4620      	mov	r0, r4
   b5cee:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   b5cf0:	2301      	movs	r3, #1
   b5cf2:	e7f9      	b.n	b5ce8 <itoa+0x20>

000b5cf4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b5cf4:	4b01      	ldr	r3, [pc, #4]	; (b5cfc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b5cf6:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b5cf8:	4770      	bx	lr
   b5cfa:	bf00      	nop
   b5cfc:	2003e60c 	.word	0x2003e60c

000b5d00 <serialEventRun>:
{
   b5d00:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b5d02:	4b0b      	ldr	r3, [pc, #44]	; (b5d30 <serialEventRun+0x30>)
   b5d04:	b143      	cbz	r3, b5d18 <serialEventRun+0x18>
   b5d06:	f7ff ff45 	bl	b5b94 <_Z16_fetch_usbserialv>
   b5d0a:	6803      	ldr	r3, [r0, #0]
   b5d0c:	691b      	ldr	r3, [r3, #16]
   b5d0e:	4798      	blx	r3
   b5d10:	2800      	cmp	r0, #0
   b5d12:	dd01      	ble.n	b5d18 <serialEventRun+0x18>
        serialEvent();
   b5d14:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b5d18:	4b06      	ldr	r3, [pc, #24]	; (b5d34 <serialEventRun+0x34>)
   b5d1a:	b143      	cbz	r3, b5d2e <serialEventRun+0x2e>
   b5d1c:	f000 f8a2 	bl	b5e64 <_Z22__fetch_global_Serial1v>
   b5d20:	6803      	ldr	r3, [r0, #0]
   b5d22:	691b      	ldr	r3, [r3, #16]
   b5d24:	4798      	blx	r3
   b5d26:	2800      	cmp	r0, #0
   b5d28:	dd01      	ble.n	b5d2e <serialEventRun+0x2e>
        serialEvent1();
   b5d2a:	f3af 8000 	nop.w
}
   b5d2e:	bd08      	pop	{r3, pc}
	...

000b5d38 <_post_loop>:
{
   b5d38:	b508      	push	{r3, lr}
	serialEventRun();
   b5d3a:	f7ff ffe1 	bl	b5d00 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b5d3e:	f7fe ff17 	bl	b4b70 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b5d42:	4b01      	ldr	r3, [pc, #4]	; (b5d48 <_post_loop+0x10>)
   b5d44:	6018      	str	r0, [r3, #0]
}
   b5d46:	bd08      	pop	{r3, pc}
   b5d48:	2003e740 	.word	0x2003e740

000b5d4c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b5d4c:	4805      	ldr	r0, [pc, #20]	; (b5d64 <_Z33system_initialize_user_backup_ramv+0x18>)
   b5d4e:	4a06      	ldr	r2, [pc, #24]	; (b5d68 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b5d50:	4906      	ldr	r1, [pc, #24]	; (b5d6c <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b5d52:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b5d54:	1a12      	subs	r2, r2, r0
   b5d56:	f000 f9c3 	bl	b60e0 <memcpy>
    __backup_sram_signature = signature;
   b5d5a:	4b05      	ldr	r3, [pc, #20]	; (b5d70 <_Z33system_initialize_user_backup_ramv+0x24>)
   b5d5c:	4a05      	ldr	r2, [pc, #20]	; (b5d74 <_Z33system_initialize_user_backup_ramv+0x28>)
   b5d5e:	601a      	str	r2, [r3, #0]
}
   b5d60:	bd08      	pop	{r3, pc}
   b5d62:	bf00      	nop
   b5d64:	2003f400 	.word	0x2003f400
   b5d68:	2003f404 	.word	0x2003f404
   b5d6c:	000b674c 	.word	0x000b674c
   b5d70:	2003f400 	.word	0x2003f400
   b5d74:	9a271c1e 	.word	0x9a271c1e

000b5d78 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b5d78:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b5d7a:	2300      	movs	r3, #0
   b5d7c:	9300      	str	r3, [sp, #0]
   b5d7e:	461a      	mov	r2, r3
   b5d80:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b5d84:	f7fe ffee 	bl	b4d64 <system_ctrl_set_result>
}
   b5d88:	b003      	add	sp, #12
   b5d8a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b5d90 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b5d90:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b5d92:	8843      	ldrh	r3, [r0, #2]
   b5d94:	2b0a      	cmp	r3, #10
   b5d96:	d008      	beq.n	b5daa <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b5d98:	2b50      	cmp	r3, #80	; 0x50
   b5d9a:	d10b      	bne.n	b5db4 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b5d9c:	4b09      	ldr	r3, [pc, #36]	; (b5dc4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b5d9e:	681b      	ldr	r3, [r3, #0]
   b5da0:	b14b      	cbz	r3, b5db6 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b5da2:	b003      	add	sp, #12
   b5da4:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b5da8:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b5daa:	f7ff ffe5 	bl	b5d78 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b5dae:	b003      	add	sp, #12
   b5db0:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b5db4:	2300      	movs	r3, #0
   b5db6:	9300      	str	r3, [sp, #0]
   b5db8:	461a      	mov	r2, r3
   b5dba:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b5dbe:	f7fe ffd1 	bl	b4d64 <system_ctrl_set_result>
}
   b5dc2:	e7f4      	b.n	b5dae <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b5dc4:	2003e73c 	.word	0x2003e73c

000b5dc8 <module_user_init_hook>:
{
   b5dc8:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b5dca:	4812      	ldr	r0, [pc, #72]	; (b5e14 <module_user_init_hook+0x4c>)
   b5dcc:	2100      	movs	r1, #0
   b5dce:	f7ff f86b 	bl	b4ea8 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b5dd2:	4b11      	ldr	r3, [pc, #68]	; (b5e18 <module_user_init_hook+0x50>)
   b5dd4:	681a      	ldr	r2, [r3, #0]
   b5dd6:	4b11      	ldr	r3, [pc, #68]	; (b5e1c <module_user_init_hook+0x54>)
   b5dd8:	429a      	cmp	r2, r3
   b5dda:	4b11      	ldr	r3, [pc, #68]	; (b5e20 <module_user_init_hook+0x58>)
   b5ddc:	bf0c      	ite	eq
   b5dde:	2201      	moveq	r2, #1
   b5de0:	2200      	movne	r2, #0
   b5de2:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b5de4:	d001      	beq.n	b5dea <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b5de6:	f7ff ffb1 	bl	b5d4c <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b5dea:	f7fe feb9 	bl	b4b60 <HAL_RNG_GetRandomNumber>
   b5dee:	4604      	mov	r4, r0
    srand(seed);
   b5df0:	f000 f98c 	bl	b610c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b5df4:	4b0b      	ldr	r3, [pc, #44]	; (b5e24 <module_user_init_hook+0x5c>)
   b5df6:	b113      	cbz	r3, b5dfe <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b5df8:	4620      	mov	r0, r4
   b5dfa:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b5dfe:	2100      	movs	r1, #0
   b5e00:	4808      	ldr	r0, [pc, #32]	; (b5e24 <module_user_init_hook+0x5c>)
   b5e02:	f7fe ffc1 	bl	b4d88 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b5e06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b5e0a:	4807      	ldr	r0, [pc, #28]	; (b5e28 <module_user_init_hook+0x60>)
   b5e0c:	2100      	movs	r1, #0
   b5e0e:	f7fe bf9f 	b.w	b4d50 <system_ctrl_set_app_request_handler>
   b5e12:	bf00      	nop
   b5e14:	000b5cf5 	.word	0x000b5cf5
   b5e18:	2003f400 	.word	0x2003f400
   b5e1c:	9a271c1e 	.word	0x9a271c1e
   b5e20:	2003e738 	.word	0x2003e738
   b5e24:	00000000 	.word	0x00000000
   b5e28:	000b5d91 	.word	0x000b5d91

000b5e2c <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b5e2c:	4770      	bx	lr
	...

000b5e30 <_Z20acquireSerial1Bufferv>:
{
   b5e30:	b538      	push	{r3, r4, r5, lr}
   b5e32:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b5e34:	2514      	movs	r5, #20
   b5e36:	462a      	mov	r2, r5
   b5e38:	2100      	movs	r1, #0
   b5e3a:	f000 f95f 	bl	b60fc <memset>
   b5e3e:	8025      	strh	r5, [r4, #0]
   b5e40:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5e42:	4907      	ldr	r1, [pc, #28]	; (b5e60 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b5e44:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5e46:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b5e48:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5e4a:	f000 f82f 	bl	b5eac <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5e4e:	4904      	ldr	r1, [pc, #16]	; (b5e60 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b5e50:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5e52:	4628      	mov	r0, r5
   b5e54:	f000 f82a 	bl	b5eac <_ZnajRKSt9nothrow_t>
    };
   b5e58:	60e0      	str	r0, [r4, #12]
}
   b5e5a:	4620      	mov	r0, r4
   b5e5c:	bd38      	pop	{r3, r4, r5, pc}
   b5e5e:	bf00      	nop
   b5e60:	000b64a0 	.word	0x000b64a0

000b5e64 <_Z22__fetch_global_Serial1v>:
{
   b5e64:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b5e66:	4d0e      	ldr	r5, [pc, #56]	; (b5ea0 <_Z22__fetch_global_Serial1v+0x3c>)
   b5e68:	7829      	ldrb	r1, [r5, #0]
   b5e6a:	f3bf 8f5b 	dmb	ish
   b5e6e:	f011 0401 	ands.w	r4, r1, #1
{
   b5e72:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b5e74:	d111      	bne.n	b5e9a <_Z22__fetch_global_Serial1v+0x36>
   b5e76:	4628      	mov	r0, r5
   b5e78:	f7fe f925 	bl	b40c6 <__cxa_guard_acquire>
   b5e7c:	b168      	cbz	r0, b5e9a <_Z22__fetch_global_Serial1v+0x36>
   b5e7e:	a801      	add	r0, sp, #4
   b5e80:	f7ff ffd6 	bl	b5e30 <_Z20acquireSerial1Bufferv>
   b5e84:	aa01      	add	r2, sp, #4
   b5e86:	4621      	mov	r1, r4
   b5e88:	4806      	ldr	r0, [pc, #24]	; (b5ea4 <_Z22__fetch_global_Serial1v+0x40>)
   b5e8a:	f7ff fe15 	bl	b5ab8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b5e8e:	4628      	mov	r0, r5
   b5e90:	f7fe f91e 	bl	b40d0 <__cxa_guard_release>
   b5e94:	4804      	ldr	r0, [pc, #16]	; (b5ea8 <_Z22__fetch_global_Serial1v+0x44>)
   b5e96:	f000 f91d 	bl	b60d4 <atexit>
    return serial1;
}
   b5e9a:	4802      	ldr	r0, [pc, #8]	; (b5ea4 <_Z22__fetch_global_Serial1v+0x40>)
   b5e9c:	b007      	add	sp, #28
   b5e9e:	bd30      	pop	{r4, r5, pc}
   b5ea0:	2003e744 	.word	0x2003e744
   b5ea4:	2003e748 	.word	0x2003e748
   b5ea8:	000b5e2d 	.word	0x000b5e2d

000b5eac <_ZnajRKSt9nothrow_t>:
   b5eac:	f7fe b905 	b.w	b40ba <_Znaj>

000b5eb0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b5eb0:	4901      	ldr	r1, [pc, #4]	; (b5eb8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b5eb2:	f000 b8f9 	b.w	b60a8 <_ZNKSt9type_infoeqERKS_>
   b5eb6:	bf00      	nop
   b5eb8:	000b64bc 	.word	0x000b64bc

000b5ebc <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b5ebc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b5ebe:	2400      	movs	r4, #0
   b5ec0:	2310      	movs	r3, #16
   b5ec2:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b5ec6:	6803      	ldr	r3, [r0, #0]
   b5ec8:	4615      	mov	r5, r2
   b5eca:	699e      	ldr	r6, [r3, #24]
   b5ecc:	6812      	ldr	r2, [r2, #0]
   b5ece:	466b      	mov	r3, sp
   b5ed0:	e9cd 4400 	strd	r4, r4, [sp]
   b5ed4:	47b0      	blx	r6
   b5ed6:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b5eda:	f003 0306 	and.w	r3, r3, #6
   b5ede:	2b06      	cmp	r3, #6
   b5ee0:	bf03      	ittte	eq
   b5ee2:	9b00      	ldreq	r3, [sp, #0]
   b5ee4:	602b      	streq	r3, [r5, #0]
   b5ee6:	2001      	moveq	r0, #1
   b5ee8:	4620      	movne	r0, r4
   b5eea:	b004      	add	sp, #16
   b5eec:	bd70      	pop	{r4, r5, r6, pc}

000b5eee <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b5eee:	9800      	ldr	r0, [sp, #0]
   b5ef0:	4290      	cmp	r0, r2
   b5ef2:	bf14      	ite	ne
   b5ef4:	2001      	movne	r0, #1
   b5ef6:	2006      	moveq	r0, #6
   b5ef8:	4770      	bx	lr
	...

000b5efc <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b5efc:	b510      	push	{r4, lr}
   b5efe:	4b03      	ldr	r3, [pc, #12]	; (b5f0c <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b5f00:	6003      	str	r3, [r0, #0]
   b5f02:	4604      	mov	r4, r0
   b5f04:	f000 f8cd 	bl	b60a2 <_ZNSt9type_infoD1Ev>
   b5f08:	4620      	mov	r0, r4
   b5f0a:	bd10      	pop	{r4, pc}
   b5f0c:	000b64fc 	.word	0x000b64fc

000b5f10 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b5f10:	b510      	push	{r4, lr}
   b5f12:	4604      	mov	r4, r0
   b5f14:	f7ff fff2 	bl	b5efc <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b5f18:	4620      	mov	r0, r4
   b5f1a:	2108      	movs	r1, #8
   b5f1c:	f7fe f8d1 	bl	b40c2 <_ZdlPvj>
   b5f20:	4620      	mov	r0, r4
   b5f22:	bd10      	pop	{r4, pc}

000b5f24 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b5f24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5f28:	461f      	mov	r7, r3
   b5f2a:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b5f2e:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b5f32:	4598      	cmp	r8, r3
   b5f34:	4606      	mov	r6, r0
   b5f36:	4615      	mov	r5, r2
   b5f38:	d107      	bne.n	b5f4a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b5f3a:	9907      	ldr	r1, [sp, #28]
   b5f3c:	f000 f8b4 	bl	b60a8 <_ZNKSt9type_infoeqERKS_>
   b5f40:	b118      	cbz	r0, b5f4a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b5f42:	7165      	strb	r5, [r4, #5]
   b5f44:	2000      	movs	r0, #0
   b5f46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b5f4a:	4639      	mov	r1, r7
   b5f4c:	4630      	mov	r0, r6
   b5f4e:	f000 f8ab 	bl	b60a8 <_ZNKSt9type_infoeqERKS_>
   b5f52:	2800      	cmp	r0, #0
   b5f54:	d0f6      	beq.n	b5f44 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b5f56:	2301      	movs	r3, #1
   b5f58:	f8c4 8000 	str.w	r8, [r4]
   b5f5c:	7125      	strb	r5, [r4, #4]
   b5f5e:	71a3      	strb	r3, [r4, #6]
   b5f60:	e7f0      	b.n	b5f44 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b5f62 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b5f62:	b538      	push	{r3, r4, r5, lr}
   b5f64:	4615      	mov	r5, r2
   b5f66:	461c      	mov	r4, r3
   b5f68:	f000 f89e 	bl	b60a8 <_ZNKSt9type_infoeqERKS_>
   b5f6c:	b120      	cbz	r0, b5f78 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b5f6e:	2308      	movs	r3, #8
   b5f70:	60e3      	str	r3, [r4, #12]
   b5f72:	2306      	movs	r3, #6
   b5f74:	6025      	str	r5, [r4, #0]
   b5f76:	7123      	strb	r3, [r4, #4]
   b5f78:	bd38      	pop	{r3, r4, r5, pc}

000b5f7a <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b5f7a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b5f7c:	4605      	mov	r5, r0
   b5f7e:	460c      	mov	r4, r1
   b5f80:	9201      	str	r2, [sp, #4]
   b5f82:	461e      	mov	r6, r3
   b5f84:	f000 f890 	bl	b60a8 <_ZNKSt9type_infoeqERKS_>
   b5f88:	b950      	cbnz	r0, b5fa0 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b5f8a:	2e03      	cmp	r6, #3
   b5f8c:	d808      	bhi.n	b5fa0 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b5f8e:	6823      	ldr	r3, [r4, #0]
   b5f90:	9a01      	ldr	r2, [sp, #4]
   b5f92:	695b      	ldr	r3, [r3, #20]
   b5f94:	4629      	mov	r1, r5
   b5f96:	4620      	mov	r0, r4
   b5f98:	b002      	add	sp, #8
   b5f9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b5f9e:	4718      	bx	r3
   b5fa0:	b002      	add	sp, #8
   b5fa2:	bd70      	pop	{r4, r5, r6, pc}

000b5fa4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b5fa4:	b510      	push	{r4, lr}
   b5fa6:	4b03      	ldr	r3, [pc, #12]	; (b5fb4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b5fa8:	6003      	str	r3, [r0, #0]
   b5faa:	4604      	mov	r4, r0
   b5fac:	f7ff ffa6 	bl	b5efc <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b5fb0:	4620      	mov	r0, r4
   b5fb2:	bd10      	pop	{r4, pc}
   b5fb4:	000b655c 	.word	0x000b655c

000b5fb8 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b5fb8:	b510      	push	{r4, lr}
   b5fba:	4604      	mov	r4, r0
   b5fbc:	f7ff fff2 	bl	b5fa4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b5fc0:	4620      	mov	r0, r4
   b5fc2:	210c      	movs	r1, #12
   b5fc4:	f7fe f87d 	bl	b40c2 <_ZdlPvj>
   b5fc8:	4620      	mov	r0, r4
   b5fca:	bd10      	pop	{r4, pc}

000b5fcc <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b5fcc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b5fce:	9f08      	ldr	r7, [sp, #32]
   b5fd0:	4297      	cmp	r7, r2
   b5fd2:	4605      	mov	r5, r0
   b5fd4:	460e      	mov	r6, r1
   b5fd6:	4614      	mov	r4, r2
   b5fd8:	d00a      	beq.n	b5ff0 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b5fda:	68a8      	ldr	r0, [r5, #8]
   b5fdc:	6802      	ldr	r2, [r0, #0]
   b5fde:	9708      	str	r7, [sp, #32]
   b5fe0:	6a15      	ldr	r5, [r2, #32]
   b5fe2:	4631      	mov	r1, r6
   b5fe4:	4622      	mov	r2, r4
   b5fe6:	46ac      	mov	ip, r5
   b5fe8:	b003      	add	sp, #12
   b5fea:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b5fee:	4760      	bx	ip
   b5ff0:	4619      	mov	r1, r3
   b5ff2:	9301      	str	r3, [sp, #4]
   b5ff4:	f000 f858 	bl	b60a8 <_ZNKSt9type_infoeqERKS_>
   b5ff8:	9b01      	ldr	r3, [sp, #4]
   b5ffa:	2800      	cmp	r0, #0
   b5ffc:	d0ed      	beq.n	b5fda <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b5ffe:	2006      	movs	r0, #6
   b6000:	b003      	add	sp, #12
   b6002:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b6004 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b6004:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6008:	460d      	mov	r5, r1
   b600a:	4619      	mov	r1, r3
   b600c:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b6010:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b6014:	4681      	mov	r9, r0
   b6016:	4617      	mov	r7, r2
   b6018:	4698      	mov	r8, r3
   b601a:	f000 f845 	bl	b60a8 <_ZNKSt9type_infoeqERKS_>
   b601e:	b190      	cbz	r0, b6046 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b6020:	2d00      	cmp	r5, #0
   b6022:	6034      	str	r4, [r6, #0]
   b6024:	7137      	strb	r7, [r6, #4]
   b6026:	db09      	blt.n	b603c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b6028:	1961      	adds	r1, r4, r5
   b602a:	458a      	cmp	sl, r1
   b602c:	bf0c      	ite	eq
   b602e:	2106      	moveq	r1, #6
   b6030:	2101      	movne	r1, #1
   b6032:	71b1      	strb	r1, [r6, #6]
   b6034:	2000      	movs	r0, #0
   b6036:	b001      	add	sp, #4
   b6038:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b603c:	3502      	adds	r5, #2
   b603e:	d1f9      	bne.n	b6034 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b6040:	2301      	movs	r3, #1
   b6042:	71b3      	strb	r3, [r6, #6]
   b6044:	e7f6      	b.n	b6034 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b6046:	4554      	cmp	r4, sl
   b6048:	d106      	bne.n	b6058 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b604a:	4659      	mov	r1, fp
   b604c:	4648      	mov	r0, r9
   b604e:	f000 f82b 	bl	b60a8 <_ZNKSt9type_infoeqERKS_>
   b6052:	b108      	cbz	r0, b6058 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b6054:	7177      	strb	r7, [r6, #5]
   b6056:	e7ed      	b.n	b6034 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b6058:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b605c:	6803      	ldr	r3, [r0, #0]
   b605e:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b6062:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b6066:	69dc      	ldr	r4, [r3, #28]
   b6068:	463a      	mov	r2, r7
   b606a:	4643      	mov	r3, r8
   b606c:	4629      	mov	r1, r5
   b606e:	46a4      	mov	ip, r4
   b6070:	b001      	add	sp, #4
   b6072:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6076:	4760      	bx	ip

000b6078 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b6078:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b607c:	4607      	mov	r7, r0
   b607e:	460c      	mov	r4, r1
   b6080:	4615      	mov	r5, r2
   b6082:	461e      	mov	r6, r3
   b6084:	f7ff ff6d 	bl	b5f62 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b6088:	b948      	cbnz	r0, b609e <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b608a:	68b8      	ldr	r0, [r7, #8]
   b608c:	6803      	ldr	r3, [r0, #0]
   b608e:	699f      	ldr	r7, [r3, #24]
   b6090:	462a      	mov	r2, r5
   b6092:	4633      	mov	r3, r6
   b6094:	4621      	mov	r1, r4
   b6096:	46bc      	mov	ip, r7
   b6098:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b609c:	4760      	bx	ip
   b609e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b60a2 <_ZNSt9type_infoD1Ev>:
   b60a2:	4770      	bx	lr

000b60a4 <_ZNKSt9type_info14__is_pointer_pEv>:
   b60a4:	2000      	movs	r0, #0
   b60a6:	4770      	bx	lr

000b60a8 <_ZNKSt9type_infoeqERKS_>:
   b60a8:	4281      	cmp	r1, r0
   b60aa:	b508      	push	{r3, lr}
   b60ac:	d00e      	beq.n	b60cc <_ZNKSt9type_infoeqERKS_+0x24>
   b60ae:	6840      	ldr	r0, [r0, #4]
   b60b0:	7803      	ldrb	r3, [r0, #0]
   b60b2:	2b2a      	cmp	r3, #42	; 0x2a
   b60b4:	d00c      	beq.n	b60d0 <_ZNKSt9type_infoeqERKS_+0x28>
   b60b6:	6849      	ldr	r1, [r1, #4]
   b60b8:	780b      	ldrb	r3, [r1, #0]
   b60ba:	2b2a      	cmp	r3, #42	; 0x2a
   b60bc:	bf08      	it	eq
   b60be:	3101      	addeq	r1, #1
   b60c0:	f7fd ffac 	bl	b401c <strcmp>
   b60c4:	fab0 f080 	clz	r0, r0
   b60c8:	0940      	lsrs	r0, r0, #5
   b60ca:	bd08      	pop	{r3, pc}
   b60cc:	2001      	movs	r0, #1
   b60ce:	e7fc      	b.n	b60ca <_ZNKSt9type_infoeqERKS_+0x22>
   b60d0:	2000      	movs	r0, #0
   b60d2:	e7fa      	b.n	b60ca <_ZNKSt9type_infoeqERKS_+0x22>

000b60d4 <atexit>:
   b60d4:	2300      	movs	r3, #0
   b60d6:	4601      	mov	r1, r0
   b60d8:	461a      	mov	r2, r3
   b60da:	4618      	mov	r0, r3
   b60dc:	f000 b84c 	b.w	b6178 <__register_exitproc>

000b60e0 <memcpy>:
   b60e0:	440a      	add	r2, r1
   b60e2:	4291      	cmp	r1, r2
   b60e4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b60e8:	d100      	bne.n	b60ec <memcpy+0xc>
   b60ea:	4770      	bx	lr
   b60ec:	b510      	push	{r4, lr}
   b60ee:	f811 4b01 	ldrb.w	r4, [r1], #1
   b60f2:	f803 4f01 	strb.w	r4, [r3, #1]!
   b60f6:	4291      	cmp	r1, r2
   b60f8:	d1f9      	bne.n	b60ee <memcpy+0xe>
   b60fa:	bd10      	pop	{r4, pc}

000b60fc <memset>:
   b60fc:	4402      	add	r2, r0
   b60fe:	4603      	mov	r3, r0
   b6100:	4293      	cmp	r3, r2
   b6102:	d100      	bne.n	b6106 <memset+0xa>
   b6104:	4770      	bx	lr
   b6106:	f803 1b01 	strb.w	r1, [r3], #1
   b610a:	e7f9      	b.n	b6100 <memset+0x4>

000b610c <srand>:
   b610c:	b538      	push	{r3, r4, r5, lr}
   b610e:	4b10      	ldr	r3, [pc, #64]	; (b6150 <srand+0x44>)
   b6110:	681d      	ldr	r5, [r3, #0]
   b6112:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b6114:	4604      	mov	r4, r0
   b6116:	b9b3      	cbnz	r3, b6146 <srand+0x3a>
   b6118:	2018      	movs	r0, #24
   b611a:	f7fe fe9d 	bl	b4e58 <malloc>
   b611e:	4602      	mov	r2, r0
   b6120:	63a8      	str	r0, [r5, #56]	; 0x38
   b6122:	b920      	cbnz	r0, b612e <srand+0x22>
   b6124:	4b0b      	ldr	r3, [pc, #44]	; (b6154 <srand+0x48>)
   b6126:	480c      	ldr	r0, [pc, #48]	; (b6158 <srand+0x4c>)
   b6128:	2142      	movs	r1, #66	; 0x42
   b612a:	f7fe feb5 	bl	b4e98 <__assert_func>
   b612e:	490b      	ldr	r1, [pc, #44]	; (b615c <srand+0x50>)
   b6130:	4b0b      	ldr	r3, [pc, #44]	; (b6160 <srand+0x54>)
   b6132:	e9c0 1300 	strd	r1, r3, [r0]
   b6136:	4b0b      	ldr	r3, [pc, #44]	; (b6164 <srand+0x58>)
   b6138:	6083      	str	r3, [r0, #8]
   b613a:	230b      	movs	r3, #11
   b613c:	8183      	strh	r3, [r0, #12]
   b613e:	2100      	movs	r1, #0
   b6140:	2001      	movs	r0, #1
   b6142:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b6146:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b6148:	2200      	movs	r2, #0
   b614a:	611c      	str	r4, [r3, #16]
   b614c:	615a      	str	r2, [r3, #20]
   b614e:	bd38      	pop	{r3, r4, r5, pc}
   b6150:	2003e60c 	.word	0x2003e60c
   b6154:	000b6595 	.word	0x000b6595
   b6158:	000b65ac 	.word	0x000b65ac
   b615c:	abcd330e 	.word	0xabcd330e
   b6160:	e66d1234 	.word	0xe66d1234
   b6164:	0005deec 	.word	0x0005deec

000b6168 <strcpy>:
   b6168:	4603      	mov	r3, r0
   b616a:	f811 2b01 	ldrb.w	r2, [r1], #1
   b616e:	f803 2b01 	strb.w	r2, [r3], #1
   b6172:	2a00      	cmp	r2, #0
   b6174:	d1f9      	bne.n	b616a <strcpy+0x2>
   b6176:	4770      	bx	lr

000b6178 <__register_exitproc>:
   b6178:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b617c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b6238 <__register_exitproc+0xc0>
   b6180:	4606      	mov	r6, r0
   b6182:	f8d8 0000 	ldr.w	r0, [r8]
   b6186:	461f      	mov	r7, r3
   b6188:	460d      	mov	r5, r1
   b618a:	4691      	mov	r9, r2
   b618c:	f000 f856 	bl	b623c <__retarget_lock_acquire_recursive>
   b6190:	4b25      	ldr	r3, [pc, #148]	; (b6228 <__register_exitproc+0xb0>)
   b6192:	681c      	ldr	r4, [r3, #0]
   b6194:	b934      	cbnz	r4, b61a4 <__register_exitproc+0x2c>
   b6196:	4c25      	ldr	r4, [pc, #148]	; (b622c <__register_exitproc+0xb4>)
   b6198:	601c      	str	r4, [r3, #0]
   b619a:	4b25      	ldr	r3, [pc, #148]	; (b6230 <__register_exitproc+0xb8>)
   b619c:	b113      	cbz	r3, b61a4 <__register_exitproc+0x2c>
   b619e:	681b      	ldr	r3, [r3, #0]
   b61a0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b61a4:	6863      	ldr	r3, [r4, #4]
   b61a6:	2b1f      	cmp	r3, #31
   b61a8:	dd07      	ble.n	b61ba <__register_exitproc+0x42>
   b61aa:	f8d8 0000 	ldr.w	r0, [r8]
   b61ae:	f000 f847 	bl	b6240 <__retarget_lock_release_recursive>
   b61b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b61b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b61ba:	b34e      	cbz	r6, b6210 <__register_exitproc+0x98>
   b61bc:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b61c0:	b988      	cbnz	r0, b61e6 <__register_exitproc+0x6e>
   b61c2:	4b1c      	ldr	r3, [pc, #112]	; (b6234 <__register_exitproc+0xbc>)
   b61c4:	b923      	cbnz	r3, b61d0 <__register_exitproc+0x58>
   b61c6:	f8d8 0000 	ldr.w	r0, [r8]
   b61ca:	f000 f838 	bl	b623e <__retarget_lock_release>
   b61ce:	e7f0      	b.n	b61b2 <__register_exitproc+0x3a>
   b61d0:	f44f 7084 	mov.w	r0, #264	; 0x108
   b61d4:	f7fe fe40 	bl	b4e58 <malloc>
   b61d8:	2800      	cmp	r0, #0
   b61da:	d0f4      	beq.n	b61c6 <__register_exitproc+0x4e>
   b61dc:	2300      	movs	r3, #0
   b61de:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b61e2:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b61e6:	6863      	ldr	r3, [r4, #4]
   b61e8:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b61ec:	2201      	movs	r2, #1
   b61ee:	409a      	lsls	r2, r3
   b61f0:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b61f4:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b61f8:	4313      	orrs	r3, r2
   b61fa:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b61fe:	2e02      	cmp	r6, #2
   b6200:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b6204:	bf02      	ittt	eq
   b6206:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b620a:	4313      	orreq	r3, r2
   b620c:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b6210:	6863      	ldr	r3, [r4, #4]
   b6212:	f8d8 0000 	ldr.w	r0, [r8]
   b6216:	1c5a      	adds	r2, r3, #1
   b6218:	3302      	adds	r3, #2
   b621a:	6062      	str	r2, [r4, #4]
   b621c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b6220:	f000 f80e 	bl	b6240 <__retarget_lock_release_recursive>
   b6224:	2000      	movs	r0, #0
   b6226:	e7c6      	b.n	b61b6 <__register_exitproc+0x3e>
   b6228:	2003e7e8 	.word	0x2003e7e8
   b622c:	2003e75c 	.word	0x2003e75c
   b6230:	00000000 	.word	0x00000000
   b6234:	000b4e59 	.word	0x000b4e59
   b6238:	2003e670 	.word	0x2003e670

000b623c <__retarget_lock_acquire_recursive>:
   b623c:	4770      	bx	lr

000b623e <__retarget_lock_release>:
   b623e:	4770      	bx	lr

000b6240 <__retarget_lock_release_recursive>:
   b6240:	4770      	bx	lr

000b6242 <link_code_end>:
	...

000b6244 <link_const_data_start>:
   b6244:	514d0400 	.word	0x514d0400
   b6248:	00045454 	.word	0x00045454
   b624c:	49514d06 	.word	0x49514d06
   b6250:	03706473 	.word	0x03706473

000b6254 <dynalib_user>:
   b6254:	000b4041 000b407d 000b40a5 000b40a9     A@..}@...@...@..
   b6264:	00000000 65757274 73614500 69615774     ....true.EastWai
   b6274:	53460074 6f432f4d 6f546c6f 31636970     t.FSM/CoolTopic1
   b6284:	4d534600 44454c2f 61660031 0065736c     .FSM/LED1.false.
   b6294:	74726f4e 69615768 744f0074 20726568     NorthWait.Other 
   b62a4:	6e696874 53460067 70452f4d 6f546369     thing.FSM/EpicTo
   b62b4:	31636970 4d534600 44454c2f 62616c00     pic1.FSM/LED.lab
   b62c4:	6568742e 2e4c4357 006d6f63              .theWCL.com.

000b62d0 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...

000b62d8 <_ZTVN5spark13EthernetClassE>:
	...
   b62e0:	000b4f2f 000b4f25 000b4f1b 000b4f11     /O..%O...O...O..
   b62f0:	000b4f05 000b4ef9 000b50b9 000b50c1     .O...N...P...P..
   b6300:	000b4eed 000b4ee5 000b4edb 000b4ed1     .N...N...N...N..
   b6310:	000b50f1                                .P..

000b6314 <_ZTV9IPAddress>:
	...
   b631c:	000b4f5d 000b4f4d 000b4f4f 00707061     ]O..MO..OO..app.

000b632c <_ZTVN5spark12NetworkClassE>:
	...
   b6334:	000b5079 000b5083 000b508d 000b5097     yP...P...P...P..
   b6344:	000b50a1 000b50ad 000b50b9 000b50c1     .P...P...P...P..
   b6354:	000b50c9 000b50d5 000b50dd 000b50e7     .P...P...P...P..
   b6364:	000b50f1 69726977 7200676e 20766365     .P..wiring.recv 
   b6374:	6f727265 203d2072 00006425              error = %d..

000b6380 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b6388:	000b54cd 000b54f1 000b5a23 000b54ff     .T...T..#Z...T..
   b6398:	000b54d1                                .T..

000b639c <_ZTV9TCPClient>:
	...
   b63a4:	000b557d 000b55b1 000b5449 000b5463     }U...U..IT..cT..
   b63b4:	000b58b9 000b548d 000b572f 000b54c1     .X...T../W...T..
   b63c4:	000b57c1 000b5601 000b575d 000b596d     .W...V..]W..mY..
   b63d4:	000b56fd 000b54c3 000b5475 000b5505     .V...T..uT...U..
   b63e4:	000b55e1 252d5925 64252d6d 3a482554     .U..%Y-%m-%dT%H:
   b63f4:	253a4d25 007a2553 74637361 00656d69     %M:%S%z.asctime.

000b6404 <_ZTV11USARTSerial>:
	...
   b640c:	000b5a3d 000b5aa9 000b5a81 000b51dd     =Z...Z...Z...Q..
   b641c:	000b5a51 000b5a6d 000b5a5f 000b5a7b     QZ..mZ.._Z..{Z..
   b642c:	000b5a3f 000b5a43                       ?Z..CZ..

000b6434 <_ZTV9USBSerial>:
	...
   b643c:	000b5ae7 000b5b4f 000b5b25 000b51dd     .Z..O[..%[...Q..
   b644c:	000b5b17 000b5ae9 000b5af9 000b5b49     .[...Z...Z..I[..
   b645c:	000b5b09 000b5ae1                       .[...Z..

000b6464 <_ZTVN5spark9WiFiClassE>:
	...
   b646c:	000b5c3f 000b5c35 000b5c2b 000b5be1     ?\..5\..+\...[..
   b647c:	000b5c1f 000b5c13 000b50b9 000b50c1     .\...\...P...P..
   b648c:	000b5c07 000b5bff 000b5bf5 000b5beb     .\...[...[...[..
   b649c:	000b50f1                                .P..

000b64a0 <_ZSt7nothrow>:
	...

000b64a1 <_ZTSSt19_Sp_make_shared_tag>:
   b64a1:	39317453 5f70535f 656b616d 6168735f     St19_Sp_make_sha
   b64b1:	5f646572 00676174                        red_tag....

000b64bc <_ZTISt19_Sp_make_shared_tag>:
   b64bc:	000b64fc 000b64a1                       .d...d..

000b64c4 <_ZTIN10__cxxabiv117__class_type_infoE>:
   b64c4:	000b655c 000b64d0 000b6580              \e...d...e..

000b64d0 <_ZTSN10__cxxabiv117__class_type_infoE>:
   b64d0:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
   b64e0:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
   b64f0:	00000045                                E...

000b64f4 <_ZTVN10__cxxabiv117__class_type_infoE>:
   b64f4:	00000000 000b64c4 000b5efd 000b5f11     .....d...^..._..
   b6504:	000b60a5 000b60a5 000b5f7b 000b5ebd     .`...`..{_...^..
   b6514:	000b5f63 000b5f25 000b5eef              c_..%_...^..

000b6520 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   b6520:	000b655c 000b652c 000b64c4              \e..,e...d..

000b652c <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   b652c:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
   b653c:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
   b654c:	456f666e 00000000                       nfoE....

000b6554 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   b6554:	00000000 000b6520 000b5fa5 000b5fb9     .... e..._..._..
   b6564:	000b60a5 000b60a5 000b5f7b 000b5ebd     .`...`..{_...^..
   b6574:	000b6079 000b6005 000b5fcd              y`...`..._..

000b6580 <_ZTISt9type_info>:
   b6580:	000b64fc 000b6588                       .d...e..

000b6588 <_ZTSSt9type_info>:
   b6588:	74397453 5f657079 6f666e69 45455200     St9type_info.REE
   b6598:	6d20544e 6f6c6c61 75732063 65656363     NT malloc succee
   b65a8:	00646564 706d742f 6e656a2f 736e696b     ded./tmp/jenkins
   b65b8:	4343472d 2d30312d 65706970 656e696c     -GCC-10-pipeline
   b65c8:	5f38342d 30323032 34323131 3036315f     -48_20201124_160
   b65d8:	30383136 2f393336 2f637273 6c77656e     6180639/src/newl
   b65e8:	6e2f6269 696c7765 696c2f62 732f6362     ib/newlib/libc/s
   b65f8:	696c6474 61722f62 632e646e               tdlib/rand.c.

000b6605 <link_const_data_end>:
   b6605:	00          	.byte	0x00
	...

000b6608 <link_constructors_location>:
   b6608:	000b426d 	.word	0x000b426d
   b660c:	000b4ec1 	.word	0x000b4ec1
   b6610:	000b4f39 	.word	0x000b4f39
   b6614:	000b5069 	.word	0x000b5069
   b6618:	000b51c9 	.word	0x000b51c9
   b661c:	000b5271 	.word	0x000b5271
   b6620:	000b5425 	.word	0x000b5425
   b6624:	000b5a29 	.word	0x000b5a29
   b6628:	000b5c49 	.word	0x000b5c49
